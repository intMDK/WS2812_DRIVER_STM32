
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005054  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080051e0  080051e0  000151e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f8  080053f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080053f8  080053f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053f8  080053f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000000c  0800540c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800540c  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6d  00000000  00000000  00029ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026768  00000000  00000000  0002cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c73e  00000000  00000000  000534e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edf1d  00000000  00000000  0005fc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014db43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df4  00000000  00000000  0014db94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051c4 	.word	0x080051c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080051c4 	.word	0x080051c4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000baa:	f000 f916 	bl	8000dda <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000bae:	f003 f9ef 	bl	8003f90 <SystemClock_Config>


  /* Initialize all configured peripherals */
  GPIO_Init();
 8000bb2:	f003 f9c1 	bl	8003f38 <GPIO_Init>
  WS2812_Init();
 8000bb6:	f003 f87f 	bl	8003cb8 <WS2812_Init>

  Set_LED(0, 255, 0, 0);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	21ff      	movs	r1, #255	; 0xff
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f003 f98b 	bl	8003edc <Set_LED>
  Set_LED(1,255, 0, 0);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2200      	movs	r2, #0
 8000bca:	21ff      	movs	r1, #255	; 0xff
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f003 f985 	bl	8003edc <Set_LED>
  Set_LED(2, 255, 0, 0);
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	21ff      	movs	r1, #255	; 0xff
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f003 f97f 	bl	8003edc <Set_LED>
  Set_LED(3, 255, 0, 0);
 8000bde:	2300      	movs	r3, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	21ff      	movs	r1, #255	; 0xff
 8000be4:	2003      	movs	r0, #3
 8000be6:	f003 f979 	bl	8003edc <Set_LED>
  Set_LED(4, 255, 0, 0);
 8000bea:	2300      	movs	r3, #0
 8000bec:	2200      	movs	r2, #0
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f003 f973 	bl	8003edc <Set_LED>
  Set_LED(5, 0, 255, 0);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	22ff      	movs	r2, #255	; 0xff
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2005      	movs	r0, #5
 8000bfe:	f003 f96d 	bl	8003edc <Set_LED>
  Set_LED(6,0, 255, 0);
 8000c02:	2300      	movs	r3, #0
 8000c04:	22ff      	movs	r2, #255	; 0xff
 8000c06:	2100      	movs	r1, #0
 8000c08:	2006      	movs	r0, #6
 8000c0a:	f003 f967 	bl	8003edc <Set_LED>
  Set_LED(7,0, 255, 0);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	2100      	movs	r1, #0
 8000c14:	2007      	movs	r0, #7
 8000c16:	f003 f961 	bl	8003edc <Set_LED>
  Set_LED(8,0, 255, 0);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2008      	movs	r0, #8
 8000c22:	f003 f95b 	bl	8003edc <Set_LED>
  Set_LED(9,0, 255, 0);
 8000c26:	2300      	movs	r3, #0
 8000c28:	22ff      	movs	r2, #255	; 0xff
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2009      	movs	r0, #9
 8000c2e:	f003 f955 	bl	8003edc <Set_LED>
  Set_LED(10,0, 0, 255);
 8000c32:	23ff      	movs	r3, #255	; 0xff
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f003 f94f 	bl	8003edc <Set_LED>
  Set_LED(11, 0, 0, 255);
 8000c3e:	23ff      	movs	r3, #255	; 0xff
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	200b      	movs	r0, #11
 8000c46:	f003 f949 	bl	8003edc <Set_LED>
  Set_LED(12,0, 0, 255);
 8000c4a:	23ff      	movs	r3, #255	; 0xff
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	200c      	movs	r0, #12
 8000c52:	f003 f943 	bl	8003edc <Set_LED>
  Set_LED(13,0, 0, 255);
 8000c56:	23ff      	movs	r3, #255	; 0xff
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	200d      	movs	r0, #13
 8000c5e:	f003 f93d 	bl	8003edc <Set_LED>
//  Set_Brightness(20);
//  WS2812_send();

  while (1)
  {
	  for (int i=0; i<46; i++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e00c      	b.n	8000c82 <main+0xde>
		  {
		  	  Set_Brightness(i);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 f8af 	bl	8003dd0 <Set_Brightness>
		  	WS2812_send();
 8000c72:	f003 f82b 	bl	8003ccc <WS2812_send>
		  	  HAL_Delay (50);
 8000c76:	2032      	movs	r0, #50	; 0x32
 8000c78:	f000 f924 	bl	8000ec4 <HAL_Delay>
	  for (int i=0; i<46; i++)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b2d      	cmp	r3, #45	; 0x2d
 8000c86:	ddef      	ble.n	8000c68 <main+0xc4>
		  }

		  for (int i=45; i>=0; i--)
 8000c88:	232d      	movs	r3, #45	; 0x2d
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	e00c      	b.n	8000ca8 <main+0x104>
		  {
		  	  Set_Brightness(i);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 f89c 	bl	8003dd0 <Set_Brightness>
		  	WS2812_send();
 8000c98:	f003 f818 	bl	8003ccc <WS2812_send>
		  	  HAL_Delay (50);
 8000c9c:	2032      	movs	r0, #50	; 0x32
 8000c9e:	f000 f911 	bl	8000ec4 <HAL_Delay>
		  for (int i=45; i>=0; i--)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	daef      	bge.n	8000c8e <main+0xea>
	  for (int i=0; i<46; i++)
 8000cae:	e7d8      	b.n	8000c62 <main+0xbe>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f89e 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <DMA1_Channel2_IRQHandler>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void DMA1_Channel2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(htim1.hdma[TIM_DMA_ID_CC1]);
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <DMA1_Channel2_IRQHandler+0x14>)
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fb44 	bl	80013e2 <HAL_DMA_IRQHandler>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000002c 	.word	0x2000002c

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f003 f92d 	bl	8004014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fef3 	bl	8000ba4 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dcc:	08005400 	.word	0x08005400
  ldr r2, =_sbss
 8000dd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd4:	20000438 	.word	0x20000438

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>

08000dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f961 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f80e 	bl	8000e0c <HAL_InitTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e001      	b.n	8000e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfc:	f7ff ff58 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e00:	79fb      	ldrb	r3, [r7, #7]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f96d 	bl	8001116 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d809      	bhi.n	8000e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f937 	bl	80010c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e004      	b.n	8000e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e001      	b.n	8000e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000028 	.word	0x20000028

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000028 	.word	0x20000028

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e098      	b.n	8001274 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	4b4d      	ldr	r3, [pc, #308]	; (8001280 <HAL_DMA_Init+0x150>)
 800114a:	429a      	cmp	r2, r3
 800114c:	d80f      	bhi.n	800116e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_DMA_Init+0x154>)
 8001156:	4413      	add	r3, r2
 8001158:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <HAL_DMA_Init+0x158>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	009a      	lsls	r2, r3, #2
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a48      	ldr	r2, [pc, #288]	; (800128c <HAL_DMA_Init+0x15c>)
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
 800116c:	e00e      	b.n	800118c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	4b46      	ldr	r3, [pc, #280]	; (8001290 <HAL_DMA_Init+0x160>)
 8001176:	4413      	add	r3, r2
 8001178:	4a43      	ldr	r2, [pc, #268]	; (8001288 <HAL_DMA_Init+0x158>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	009a      	lsls	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a42      	ldr	r2, [pc, #264]	; (8001294 <HAL_DMA_Init+0x164>)
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011e6:	d039      	beq.n	800125c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_DMA_Init+0x15c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d11a      	bne.n	8001228 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_DMA_Init+0x168>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 031c 	and.w	r3, r3, #28
 80011fe:	210f      	movs	r1, #15
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	4924      	ldr	r1, [pc, #144]	; (8001298 <HAL_DMA_Init+0x168>)
 8001208:	4013      	ands	r3, r2
 800120a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_DMA_Init+0x168>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 031c 	and.w	r3, r3, #28
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	491d      	ldr	r1, [pc, #116]	; (8001298 <HAL_DMA_Init+0x168>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
 8001226:	e019      	b.n	800125c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_DMA_Init+0x16c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001230:	f003 031c 	and.w	r3, r3, #28
 8001234:	210f      	movs	r1, #15
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	4917      	ldr	r1, [pc, #92]	; (800129c <HAL_DMA_Init+0x16c>)
 800123e:	4013      	ands	r3, r2
 8001240:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_DMA_Init+0x16c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f003 031c 	and.w	r3, r3, #28
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	4911      	ldr	r1, [pc, #68]	; (800129c <HAL_DMA_Init+0x16c>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40020407 	.word	0x40020407
 8001284:	bffdfff8 	.word	0xbffdfff8
 8001288:	cccccccd 	.word	0xcccccccd
 800128c:	40020000 	.word	0x40020000
 8001290:	bffdfbf8 	.word	0xbffdfbf8
 8001294:	40020400 	.word	0x40020400
 8001298:	400200a8 	.word	0x400200a8
 800129c:	400204a8 	.word	0x400204a8

080012a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_DMA_Start_IT+0x20>
 80012bc:	2302      	movs	r3, #2
 80012be:	e04b      	b.n	8001358 <HAL_DMA_Start_IT+0xb8>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d13a      	bne.n	800134a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f921 	bl	8001540 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 020e 	orr.w	r2, r2, #14
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e00f      	b.n	8001338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0204 	bic.w	r2, r2, #4
 8001326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 020a 	orr.w	r2, r2, #10
 8001336:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e005      	b.n	8001356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001352:	2302      	movs	r3, #2
 8001354:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001356:	7dfb      	ldrb	r3, [r7, #23]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d005      	beq.n	8001384 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e029      	b.n	80013d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 020e 	bic.w	r2, r2, #14
 8001392:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f003 021c 	and.w	r2, r3, #28
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
    }
  }
  return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 031c 	and.w	r3, r3, #28
 8001402:	2204      	movs	r2, #4
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d026      	beq.n	800145c <HAL_DMA_IRQHandler+0x7a>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d021      	beq.n	800145c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d107      	bne.n	8001436 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0204 	bic.w	r2, r2, #4
 8001434:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f003 021c 	and.w	r2, r3, #28
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2104      	movs	r1, #4
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	2b00      	cmp	r3, #0
 8001450:	d071      	beq.n	8001536 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800145a:	e06c      	b.n	8001536 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	f003 031c 	and.w	r3, r3, #28
 8001464:	2202      	movs	r2, #2
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d02e      	beq.n	80014ce <HAL_DMA_IRQHandler+0xec>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d029      	beq.n	80014ce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10b      	bne.n	80014a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020a 	bic.w	r2, r2, #10
 8001496:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	f003 021c 	and.w	r2, r3, #28
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2102      	movs	r1, #2
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d038      	beq.n	8001536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014cc:	e033      	b.n	8001536 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f003 031c 	and.w	r3, r3, #28
 80014d6:	2208      	movs	r2, #8
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d02a      	beq.n	8001538 <HAL_DMA_IRQHandler+0x156>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d025      	beq.n	8001538 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 020e 	bic.w	r2, r2, #14
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f003 021c 	and.w	r2, r3, #28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2101      	movs	r1, #1
 800150a:	fa01 f202 	lsl.w	r2, r1, r2
 800150e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001536:	bf00      	nop
 8001538:	bf00      	nop
}
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f003 021c 	and.w	r2, r3, #28
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b10      	cmp	r3, #16
 8001570:	d108      	bne.n	8001584 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001582:	e007      	b.n	8001594 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	e17f      	b.n	80018b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8171 	beq.w	80018aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d005      	beq.n	80015e0 <HAL_GPIO_Init+0x40>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f003 0201 	and.w	r2, r3, #1
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b03      	cmp	r3, #3
 800164c:	d118      	bne.n	8001680 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80ac 	beq.w	80018aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	4a5e      	ldr	r2, [pc, #376]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6613      	str	r3, [r2, #96]	; 0x60
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_GPIO_Init+0x330>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800176a:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_GPIO_Init+0x334>)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001794:	d025      	beq.n	80017e2 <HAL_GPIO_Init+0x242>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <HAL_GPIO_Init+0x338>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01f      	beq.n	80017de <HAL_GPIO_Init+0x23e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_GPIO_Init+0x33c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_GPIO_Init+0x23a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4d      	ldr	r2, [pc, #308]	; (80018e0 <HAL_GPIO_Init+0x340>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0x236>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x344>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00d      	beq.n	80017d2 <HAL_GPIO_Init+0x232>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_GPIO_Init+0x348>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d007      	beq.n	80017ce <HAL_GPIO_Init+0x22e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4a      	ldr	r2, [pc, #296]	; (80018ec <HAL_GPIO_Init+0x34c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_GPIO_Init+0x22a>
 80017c6:	2306      	movs	r3, #6
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017ca:	2307      	movs	r3, #7
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x244>
 80017e2:	2300      	movs	r3, #0
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f4:	4937      	ldr	r1, [pc, #220]	; (80018d4 <HAL_GPIO_Init+0x334>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_GPIO_Init+0x350>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001826:	4a32      	ldr	r2, [pc, #200]	; (80018f0 <HAL_GPIO_Init+0x350>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_GPIO_Init+0x350>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_GPIO_Init+0x350>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_GPIO_Init+0x350>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_GPIO_Init+0x350>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_GPIO_Init+0x350>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_GPIO_Init+0x350>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f47f ae78 	bne.w	80015b0 <HAL_GPIO_Init+0x10>
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000800 	.word	0x48000800
 80018e0:	48000c00 	.word	0x48000c00
 80018e4:	48001000 	.word	0x48001000
 80018e8:	48001400 	.word	0x48001400
 80018ec:	48001800 	.word	0x48001800
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_PWREx_GetVoltageRange+0x18>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000

08001910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191e:	d130      	bne.n	8001982 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192c:	d038      	beq.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2232      	movs	r2, #50	; 0x32
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0c9b      	lsrs	r3, r3, #18
 8001950:	3301      	adds	r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001954:	e002      	b.n	800195c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3b01      	subs	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001968:	d102      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x60>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f2      	bne.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197c:	d110      	bne.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e00f      	b.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198e:	d007      	beq.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40007000 	.word	0x40007000
 80019b4:	20000000 	.word	0x20000000
 80019b8:	431bde83 	.word	0x431bde83

080019bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e3ca      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ce:	4b97      	ldr	r3, [pc, #604]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80e4 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_RCC_OscConfig+0x4a>
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	f040 808b 	bne.w	8001b14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 8087 	bne.w	8001b14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a06:	4b89      	ldr	r3, [pc, #548]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x62>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e3a2      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	4b82      	ldr	r3, [pc, #520]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_RCC_OscConfig+0x7c>
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a36:	e005      	b.n	8001a44 <HAL_RCC_OscConfig+0x88>
 8001a38:	4b7c      	ldr	r3, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d223      	bcs.n	8001a90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fd1d 	bl	800248c <RCC_SetFlashLatencyFromMSIRange>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e383      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5c:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b70      	ldr	r3, [pc, #448]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	496d      	ldr	r1, [pc, #436]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	4b6c      	ldr	r3, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4968      	ldr	r1, [pc, #416]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	e025      	b.n	8001adc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a90:	4b66      	ldr	r3, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4960      	ldr	r1, [pc, #384]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aae:	4b5f      	ldr	r3, [pc, #380]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	495b      	ldr	r1, [pc, #364]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fcdd 	bl	800248c <RCC_SetFlashLatencyFromMSIRange>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e343      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001adc:	f000 fc4a 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	4950      	ldr	r1, [pc, #320]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_RCC_OscConfig+0x278>)
 8001afa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <HAL_RCC_OscConfig+0x27c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f983 	bl	8000e0c <HAL_InitTick>
 8001b06:	4603      	mov	r3, r0
 8001b08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d052      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	e327      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d032      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b1c:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a42      	ldr	r2, [pc, #264]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b28:	f7ff f9c0 	bl	8000eac <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b30:	f7ff f9bc 	bl	8000eac <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e310      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a36      	ldr	r2, [pc, #216]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4931      	ldr	r1, [pc, #196]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	492c      	ldr	r1, [pc, #176]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e01a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f98d 	bl	8000eac <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b96:	f7ff f989 	bl	8000eac <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e2dd      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x1da>
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d074      	beq.n	8001cae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d10e      	bne.n	8001bee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d064      	beq.n	8001cac <HAL_RCC_OscConfig+0x2f0>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d160      	bne.n	8001cac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e2ba      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x24a>
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e026      	b.n	8001c54 <HAL_RCC_OscConfig+0x298>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0e:	d115      	bne.n	8001c3c <HAL_RCC_OscConfig+0x280>
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a02      	ldr	r2, [pc, #8]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x298>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	080051e0 	.word	0x080051e0
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	4ba0      	ldr	r3, [pc, #640]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a9f      	ldr	r2, [pc, #636]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a9c      	ldr	r2, [pc, #624]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f926 	bl	8000eac <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f922 	bl	8000eac <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e276      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	4b92      	ldr	r3, [pc, #584]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x2a8>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f912 	bl	8000eac <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f90e 	bl	8000eac <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e262      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9e:	4b88      	ldr	r3, [pc, #544]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2d0>
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d060      	beq.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_OscConfig+0x310>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d119      	bne.n	8001cfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d116      	bne.n	8001cfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ccc:	4b7c      	ldr	r3, [pc, #496]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x328>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e23f      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	4973      	ldr	r1, [pc, #460]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf8:	e040      	b.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d023      	beq.n	8001d4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d02:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f8cd 	bl	8000eac <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff f8c9 	bl	8000eac <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e21d      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d28:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b62      	ldr	r3, [pc, #392]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	061b      	lsls	r3, r3, #24
 8001d42:	495f      	ldr	r1, [pc, #380]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	e018      	b.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff f8a9 	bl	8000eac <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f8a5 	bl	8000eac <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e1f9      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d03c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01c      	beq.n	8001dca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d90:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f884 	bl	8000eac <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff f880 	bl	8000eac <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1d4      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ef      	beq.n	8001da8 <HAL_RCC_OscConfig+0x3ec>
 8001dc8:	e01b      	b.n	8001e02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd0:	4a3b      	ldr	r2, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff f867 	bl	8000eac <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de2:	f7ff f863 	bl	8000eac <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1b7      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ef      	bne.n	8001de2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80a6 	beq.w	8001f5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10d      	bne.n	8001e3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d118      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x508>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x508>)
 8001e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e54:	f7ff f82a 	bl	8000eac <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5c:	f7ff f826 	bl	8000eac <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e17a      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x508>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4d8>
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e92:	e029      	b.n	8001ee8 <HAL_RCC_OscConfig+0x52c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d115      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x50c>
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb2:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ebc:	e014      	b.n	8001ee8 <HAL_RCC_OscConfig+0x52c>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	4b9c      	ldr	r3, [pc, #624]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	4a9b      	ldr	r2, [pc, #620]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed8:	4b98      	ldr	r3, [pc, #608]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	4a97      	ldr	r2, [pc, #604]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d016      	beq.n	8001f1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7fe ffdc 	bl	8000eac <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ffd8 	bl	8000eac <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e12a      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0e:	4b8b      	ldr	r3, [pc, #556]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ed      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x53c>
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffc5 	bl	8000eac <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe ffc1 	bl	8000eac <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e113      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f3c:	4b7f      	ldr	r3, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ed      	bne.n	8001f26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b7a      	ldr	r3, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80fe 	beq.w	8002162 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	f040 80d0 	bne.w	8002110 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f70:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d130      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d127      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fb0:	2a07      	cmp	r2, #7
 8001fb2:	bf14      	ite	ne
 8001fb4:	2201      	movne	r2, #1
 8001fb6:	2200      	moveq	r2, #0
 8001fb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d113      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d06e      	beq.n	80020c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d069      	beq.n	80020c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0ad      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x780>)
 800200e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002012:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002014:	f7fe ff4a 	bl	8000eac <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7fe ff46 	bl	8000eac <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e09a      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203a:	4b40      	ldr	r3, [pc, #256]	; (800213c <HAL_RCC_OscConfig+0x780>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x784>)
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204a:	3a01      	subs	r2, #1
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	4311      	orrs	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002054:	0212      	lsls	r2, r2, #8
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800205c:	0852      	lsrs	r2, r2, #1
 800205e:	3a01      	subs	r2, #1
 8002060:	0552      	lsls	r2, r2, #21
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002068:	0852      	lsrs	r2, r2, #1
 800206a:	3a01      	subs	r2, #1
 800206c:	0652      	lsls	r2, r2, #25
 800206e:	4311      	orrs	r1, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002074:	0912      	lsrs	r2, r2, #4
 8002076:	0452      	lsls	r2, r2, #17
 8002078:	430a      	orrs	r2, r1
 800207a:	4930      	ldr	r1, [pc, #192]	; (800213c <HAL_RCC_OscConfig+0x780>)
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x780>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a2a      	ldr	r2, [pc, #168]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002098:	f7fe ff08 	bl	8000eac <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe ff04 	bl	8000eac <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e058      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0x780>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020be:	e050      	b.n	8002162 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e04f      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d148      	bne.n	8002162 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCC_OscConfig+0x780>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	; (800213c <HAL_RCC_OscConfig+0x780>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_RCC_OscConfig+0x780>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_RCC_OscConfig+0x780>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e8:	f7fe fee0 	bl	8000eac <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fedc 	bl	8000eac <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e030      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x734>
 800210e:	e028      	b.n	8002162 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d023      	beq.n	800215e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x780>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <HAL_RCC_OscConfig+0x780>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fec3 	bl	8000eac <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	e00c      	b.n	8002144 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7fe febf 	bl	8000eac <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d905      	bls.n	8002144 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e013      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
 800213c:	40021000 	.word	0x40021000
 8002140:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_OscConfig+0x7b0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ec      	bne.n	800212a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x7b0>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4905      	ldr	r1, [pc, #20]	; (800216c <HAL_RCC_OscConfig+0x7b0>)
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x7b4>)
 8002158:	4013      	ands	r3, r2
 800215a:	60cb      	str	r3, [r1, #12]
 800215c:	e001      	b.n	8002162 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	feeefffc 	.word	0xfeeefffc

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0e7      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4970      	ldr	r1, [pc, #448]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b6e      	ldr	r3, [pc, #440]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0cf      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d908      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4960      	ldr	r1, [pc, #384]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04c      	beq.n	800228c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	4b5a      	ldr	r3, [pc, #360]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d121      	bne.n	800224a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0a6      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	4b54      	ldr	r3, [pc, #336]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e09a      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800222a:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e08e      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e086      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4943      	ldr	r1, [pc, #268]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800225c:	f7fe fe26 	bl	8000eac <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7fe fe22 	bl	8000eac <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e06e      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d208      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	492b      	ldr	r1, [pc, #172]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d210      	bcs.n	80022ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 0207 	bic.w	r2, r3, #7
 80022d0:	4923      	ldr	r1, [pc, #140]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_ClockConfig+0x1ec>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e036      	b.n	8002358 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4918      	ldr	r1, [pc, #96]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4910      	ldr	r1, [pc, #64]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002328:	f000 f824 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	490b      	ldr	r1, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1f4>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1f8>)
 8002346:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1fc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fd5d 	bl	8000e0c <HAL_InitTick>
 8002352:	4603      	mov	r3, r0
 8002354:	72fb      	strb	r3, [r7, #11]

  return status;
 8002356:	7afb      	ldrb	r3, [r7, #11]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
 8002368:	080051e0 	.word	0x080051e0
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x34>
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d121      	bne.n	80023e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d11e      	bne.n	80023e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e005      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023d0:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e004      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f8:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_RCC_GetSysClockFreq+0x114>)
 80023fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d134      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d003      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0xa6>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d003      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0xac>
 8002418:	e005      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_GetSysClockFreq+0x110>)
 800241c:	617b      	str	r3, [r7, #20]
      break;
 800241e:	e005      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_GetSysClockFreq+0x114>)
 8002422:	617b      	str	r3, [r7, #20]
      break;
 8002424:	e002      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	617b      	str	r3, [r7, #20]
      break;
 800242a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	3301      	adds	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fb03 f202 	mul.w	r2, r3, r2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0e5b      	lsrs	r3, r3, #25
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	3301      	adds	r3, #1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800246c:	69bb      	ldr	r3, [r7, #24]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	080051f0 	.word	0x080051f0
 8002484:	00f42400 	.word	0x00f42400
 8002488:	007a1200 	.word	0x007a1200

0800248c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024a4:	f7ff fa26 	bl	80018f4 <HAL_PWREx_GetVoltageRange>
 80024a8:	6178      	str	r0, [r7, #20]
 80024aa:	e014      	b.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a24      	ldr	r2, [pc, #144]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024c4:	f7ff fa16 	bl	80018f4 <HAL_PWREx_GetVoltageRange>
 80024c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024dc:	d10b      	bne.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b80      	cmp	r3, #128	; 0x80
 80024e2:	d919      	bls.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2ba0      	cmp	r3, #160	; 0xa0
 80024e8:	d902      	bls.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ea:	2302      	movs	r3, #2
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e013      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f0:	2301      	movs	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	e010      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d902      	bls.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024fc:	2303      	movs	r3, #3
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	e00a      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d102      	bne.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002508:	2302      	movs	r3, #2
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e004      	b.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b70      	cmp	r3, #112	; 0x70
 8002512:	d101      	bne.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 0207 	bic.w	r2, r3, #7
 8002520:	4909      	ldr	r1, [pc, #36]	; (8002548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e049      	b.n	80025f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f841 	bl	80025fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f000 fe7a 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e049      	b.n	80026b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f841 	bl	80026bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f000 fe19 	bl	8003284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_TIM_PWM_Start_DMA+0x2c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e03c      	b.n	8002776 <HAL_TIM_PWM_Start_DMA+0xa6>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d109      	bne.n	8002716 <HAL_TIM_PWM_Start_DMA+0x46>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	e02f      	b.n	8002776 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d109      	bne.n	8002730 <HAL_TIM_PWM_Start_DMA+0x60>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e022      	b.n	8002776 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d109      	bne.n	800274a <HAL_TIM_PWM_Start_DMA+0x7a>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e015      	b.n	8002776 <HAL_TIM_PWM_Start_DMA+0xa6>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d109      	bne.n	8002764 <HAL_TIM_PWM_Start_DMA+0x94>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e008      	b.n	8002776 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	e1ab      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e03c      	b.n	8002812 <HAL_TIM_PWM_Start_DMA+0x142>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d109      	bne.n	80027b2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e02f      	b.n	8002812 <HAL_TIM_PWM_Start_DMA+0x142>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PWM_Start_DMA+0xfc>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e022      	b.n	8002812 <HAL_TIM_PWM_Start_DMA+0x142>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d109      	bne.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x116>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e015      	b.n	8002812 <HAL_TIM_PWM_Start_DMA+0x142>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d109      	bne.n	8002800 <HAL_TIM_PWM_Start_DMA+0x130>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e008      	b.n	8002812 <HAL_TIM_PWM_Start_DMA+0x142>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d034      	beq.n	8002880 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_TIM_PWM_Start_DMA+0x152>
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e157      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <HAL_TIM_PWM_Start_DMA+0x166>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002834:	e026      	b.n	8002884 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start_DMA+0x176>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	e01e      	b.n	8002884 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start_DMA+0x186>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002854:	e016      	b.n	8002884 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start_DMA+0x196>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002864:	e00e      	b.n	8002884 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d104      	bne.n	8002876 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002874:	e006      	b.n	8002884 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800287e:	e001      	b.n	8002884 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e128      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	f200 80ae 	bhi.w	80029e8 <HAL_TIM_PWM_Start_DMA+0x318>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028c9 	.word	0x080028c9
 8002898:	080029e9 	.word	0x080029e9
 800289c:	080029e9 	.word	0x080029e9
 80028a0:	080029e9 	.word	0x080029e9
 80028a4:	08002911 	.word	0x08002911
 80028a8:	080029e9 	.word	0x080029e9
 80028ac:	080029e9 	.word	0x080029e9
 80028b0:	080029e9 	.word	0x080029e9
 80028b4:	08002959 	.word	0x08002959
 80028b8:	080029e9 	.word	0x080029e9
 80028bc:	080029e9 	.word	0x080029e9
 80028c0:	080029e9 	.word	0x080029e9
 80028c4:	080029a1 	.word	0x080029a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	4a84      	ldr	r2, [pc, #528]	; (8002ae0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	4a83      	ldr	r2, [pc, #524]	; (8002ae4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	4a82      	ldr	r2, [pc, #520]	; (8002ae8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80028de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3334      	adds	r3, #52	; 0x34
 80028ec:	461a      	mov	r2, r3
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	f7fe fcd6 	bl	80012a0 <HAL_DMA_Start_IT>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0eb      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290c:	60da      	str	r2, [r3, #12]
      break;
 800290e:	e06e      	b.n	80029ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	4a72      	ldr	r2, [pc, #456]	; (8002ae0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <HAL_TIM_PWM_Start_DMA+0x414>)
 800291e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8002926:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3338      	adds	r3, #56	; 0x38
 8002934:	461a      	mov	r2, r3
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	f7fe fcb2 	bl	80012a0 <HAL_DMA_Start_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0c7      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002954:	60da      	str	r2, [r3, #12]
      break;
 8002956:	e04a      	b.n	80029ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	4a60      	ldr	r2, [pc, #384]	; (8002ae0 <HAL_TIM_PWM_Start_DMA+0x410>)
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	4a5f      	ldr	r2, [pc, #380]	; (8002ae4 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	333c      	adds	r3, #60	; 0x3c
 800297c:	461a      	mov	r2, r3
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	f7fe fc8e 	bl	80012a0 <HAL_DMA_Start_IT>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0a3      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299c:	60da      	str	r2, [r3, #12]
      break;
 800299e:	e026      	b.n	80029ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	4a4d      	ldr	r2, [pc, #308]	; (8002ae4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a4c      	ldr	r2, [pc, #304]	; (8002ae8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3340      	adds	r3, #64	; 0x40
 80029c4:	461a      	mov	r2, r3
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	f7fe fc6a 	bl	80012a0 <HAL_DMA_Start_IT>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029e4:	60da      	str	r2, [r3, #12]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
      break;
 80029ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d16f      	bne.n	8002ad4 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2201      	movs	r2, #1
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f857 	bl	8003ab0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a39      	ldr	r2, [pc, #228]	; (8002aec <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x364>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00e      	beq.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x364>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x364>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x364>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_TIM_PWM_Start_DMA+0x368>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_TIM_PWM_Start_DMA+0x36a>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_TIM_PWM_Start_DMA+0x41c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d018      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <HAL_TIM_PWM_Start_DMA+0x430>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_TIM_PWM_Start_DMA+0x434>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <HAL_TIM_PWM_Start_DMA+0x438>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d115      	bne.n	8002ac0 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d015      	beq.n	8002ad2 <HAL_TIM_PWM_Start_DMA+0x402>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d011      	beq.n	8002ad2 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abe:	e008      	b.n	8002ad2 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e000      	b.n	8002ad4 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08003175 	.word	0x08003175
 8002ae4:	0800321d 	.word	0x0800321d
 8002ae8:	080030e3 	.word	0x080030e3
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40013400 	.word	0x40013400
 8002af4:	40014000 	.word	0x40014000
 8002af8:	40014400 	.word	0x40014400
 8002afc:	40014800 	.word	0x40014800
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	00010007 	.word	0x00010007

08002b10 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d855      	bhi.n	8002bd0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b61 	.word	0x08002b61
 8002b30:	08002bd1 	.word	0x08002bd1
 8002b34:	08002bd1 	.word	0x08002bd1
 8002b38:	08002bd1 	.word	0x08002bd1
 8002b3c:	08002b7d 	.word	0x08002b7d
 8002b40:	08002bd1 	.word	0x08002bd1
 8002b44:	08002bd1 	.word	0x08002bd1
 8002b48:	08002bd1 	.word	0x08002bd1
 8002b4c:	08002b99 	.word	0x08002b99
 8002b50:	08002bd1 	.word	0x08002bd1
 8002b54:	08002bd1 	.word	0x08002bd1
 8002b58:	08002bd1 	.word	0x08002bd1
 8002b5c:	08002bb5 	.word	0x08002bb5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fbf3 	bl	8001360 <HAL_DMA_Abort_IT>
      break;
 8002b7a:	e02c      	b.n	8002bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fbe5 	bl	8001360 <HAL_DMA_Abort_IT>
      break;
 8002b96:	e01e      	b.n	8002bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fbd7 	bl	8001360 <HAL_DMA_Abort_IT>
      break;
 8002bb2:	e010      	b.n	8002bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bc2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fbc9 	bl	8001360 <HAL_DMA_Abort_IT>
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 8081 	bne.w	8002ce0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 ff62 	bl	8003ab0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a3e      	ldr	r2, [pc, #248]	; (8002cec <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_PWM_Stop_DMA+0x112>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10f      	bne.n	8002c58 <HAL_TIM_PWM_Stop_DMA+0x148>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	f240 4344 	movw	r3, #1092	; 0x444
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_PWM_Stop_DMA+0x148>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a1a      	ldr	r2, [r3, #32]
 8002c5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <HAL_TIM_PWM_Stop_DMA+0x178>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a1a      	ldr	r2, [r3, #32]
 8002c6e:	f240 4344 	movw	r3, #1092	; 0x444
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_PWM_Stop_DMA+0x178>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <HAL_TIM_PWM_Stop_DMA+0x188>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c96:	e023      	b.n	8002ce0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d104      	bne.n	8002ca8 <HAL_TIM_PWM_Stop_DMA+0x198>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca6:	e01b      	b.n	8002ce0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d104      	bne.n	8002cb8 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb6:	e013      	b.n	8002ce0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d104      	bne.n	8002cc8 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cc6:	e00b      	b.n	8002ce0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d104      	bne.n	8002cd8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd6:	e003      	b.n	8002ce0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40013400 	.word	0x40013400
 8002cf4:	40014000 	.word	0x40014000
 8002cf8:	40014400 	.word	0x40014400
 8002cfc:	40014800 	.word	0x40014800

08002d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0ff      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b14      	cmp	r3, #20
 8002d2a:	f200 80f0 	bhi.w	8002f0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d89 	.word	0x08002d89
 8002d38:	08002f0f 	.word	0x08002f0f
 8002d3c:	08002f0f 	.word	0x08002f0f
 8002d40:	08002f0f 	.word	0x08002f0f
 8002d44:	08002dc9 	.word	0x08002dc9
 8002d48:	08002f0f 	.word	0x08002f0f
 8002d4c:	08002f0f 	.word	0x08002f0f
 8002d50:	08002f0f 	.word	0x08002f0f
 8002d54:	08002e0b 	.word	0x08002e0b
 8002d58:	08002f0f 	.word	0x08002f0f
 8002d5c:	08002f0f 	.word	0x08002f0f
 8002d60:	08002f0f 	.word	0x08002f0f
 8002d64:	08002e4b 	.word	0x08002e4b
 8002d68:	08002f0f 	.word	0x08002f0f
 8002d6c:	08002f0f 	.word	0x08002f0f
 8002d70:	08002f0f 	.word	0x08002f0f
 8002d74:	08002e8d 	.word	0x08002e8d
 8002d78:	08002f0f 	.word	0x08002f0f
 8002d7c:	08002f0f 	.word	0x08002f0f
 8002d80:	08002f0f 	.word	0x08002f0f
 8002d84:	08002ecd 	.word	0x08002ecd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fb1e 	bl	80033d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0204 	bic.w	r2, r2, #4
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	619a      	str	r2, [r3, #24]
      break;
 8002dc6:	e0a5      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fb8e 	bl	80034f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6999      	ldr	r1, [r3, #24]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	021a      	lsls	r2, r3, #8
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	619a      	str	r2, [r3, #24]
      break;
 8002e08:	e084      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fbf7 	bl	8003604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0208 	orr.w	r2, r2, #8
 8002e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0204 	bic.w	r2, r2, #4
 8002e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
      break;
 8002e48:	e064      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fc5f 	bl	8003714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69d9      	ldr	r1, [r3, #28]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	61da      	str	r2, [r3, #28]
      break;
 8002e8a:	e043      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fca8 	bl	80037e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0208 	orr.w	r2, r2, #8
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0204 	bic.w	r2, r2, #4
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002eca:	e023      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fcec 	bl	80038b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f0c:	e002      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
      break;
 8002f12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop

08002f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_TIM_ConfigClockSource+0x1c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0b6      	b.n	80030b2 <HAL_TIM_ConfigClockSource+0x18a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f80:	d03e      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0xd8>
 8002f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f86:	f200 8087 	bhi.w	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8e:	f000 8086 	beq.w	800309e <HAL_TIM_ConfigClockSource+0x176>
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	d87f      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002f98:	2b70      	cmp	r3, #112	; 0x70
 8002f9a:	d01a      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0xaa>
 8002f9c:	2b70      	cmp	r3, #112	; 0x70
 8002f9e:	d87b      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002fa0:	2b60      	cmp	r3, #96	; 0x60
 8002fa2:	d050      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x11e>
 8002fa4:	2b60      	cmp	r3, #96	; 0x60
 8002fa6:	d877      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002fa8:	2b50      	cmp	r3, #80	; 0x50
 8002faa:	d03c      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0xfe>
 8002fac:	2b50      	cmp	r3, #80	; 0x50
 8002fae:	d873      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d058      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x13e>
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d86f      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002fb8:	2b30      	cmp	r3, #48	; 0x30
 8002fba:	d064      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x15e>
 8002fbc:	2b30      	cmp	r3, #48	; 0x30
 8002fbe:	d86b      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d060      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x15e>
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d867      	bhi.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d05c      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x15e>
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d05a      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x15e>
 8002fd0:	e062      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f000 fd45 	bl	8003a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	609a      	str	r2, [r3, #8]
      break;
 8002ffe:	e04f      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f000 fd2e 	bl	8003a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003022:	609a      	str	r2, [r3, #8]
      break;
 8003024:	e03c      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 fca2 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2150      	movs	r1, #80	; 0x50
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fcfb 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003044:	e02c      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	f000 fcc1 	bl	80039da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2160      	movs	r1, #96	; 0x60
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fceb 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003064:	e01c      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	461a      	mov	r2, r3
 8003074:	f000 fc82 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fcdb 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003084:	e00c      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f000 fcd2 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003096:	e003      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      break;
 800309c:	e000      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800309e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d107      	bne.n	800310a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003108:	e02a      	b.n	8003160 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2202      	movs	r2, #2
 8003118:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003122:	e01d      	b.n	8003160 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	d107      	bne.n	800313e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2204      	movs	r2, #4
 8003132:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800313c:	e010      	b.n	8003160 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d107      	bne.n	8003158 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2208      	movs	r2, #8
 800314c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003156:	e003      	b.n	8003160 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ffb4 	bl	80030ce <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d10b      	bne.n	80031a4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d136      	bne.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a2:	e031      	b.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10b      	bne.n	80031c6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2202      	movs	r2, #2
 80031b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d125      	bne.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	e020      	b.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10b      	bne.n	80031e8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2204      	movs	r2, #4
 80031d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d114      	bne.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e6:	e00f      	b.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d10a      	bne.n	8003208 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2208      	movs	r2, #8
 80031f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fdcd 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d103      	bne.n	800323c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	771a      	strb	r2, [r3, #28]
 800323a:	e019      	b.n	8003270 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d103      	bne.n	800324e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2202      	movs	r2, #2
 800324a:	771a      	strb	r2, [r3, #28]
 800324c:	e010      	b.n	8003270 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d103      	bne.n	8003260 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2204      	movs	r2, #4
 800325c:	771a      	strb	r2, [r3, #28]
 800325e:	e007      	b.n	8003270 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d102      	bne.n	8003270 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2208      	movs	r2, #8
 800326e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff ff22 	bl	80030ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a46      	ldr	r2, [pc, #280]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <TIM_Base_SetConfig+0x134>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a41      	ldr	r2, [pc, #260]	; (80033bc <TIM_Base_SetConfig+0x138>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <TIM_Base_SetConfig+0x13c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <TIM_Base_SetConfig+0x130>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <TIM_Base_SetConfig+0x134>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a30      	ldr	r2, [pc, #192]	; (80033bc <TIM_Base_SetConfig+0x138>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <TIM_Base_SetConfig+0x13c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <TIM_Base_SetConfig+0x140>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2d      	ldr	r2, [pc, #180]	; (80033c8 <TIM_Base_SetConfig+0x144>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x9a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <TIM_Base_SetConfig+0x148>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <TIM_Base_SetConfig+0x12c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00f      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <TIM_Base_SetConfig+0x13c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00b      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <TIM_Base_SetConfig+0x140>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d007      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <TIM_Base_SetConfig+0x144>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d003      	beq.n	800337c <TIM_Base_SetConfig+0xf8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <TIM_Base_SetConfig+0x148>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d103      	bne.n	8003384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]
  }
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800
 80033bc:	40000c00 	.word	0x40000c00
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800

080033d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 0201 	bic.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f023 0302 	bic.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2c      	ldr	r2, [pc, #176]	; (80034dc <TIM_OC1_SetConfig+0x10c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_OC1_SetConfig+0x80>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <TIM_OC1_SetConfig+0x110>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_OC1_SetConfig+0x80>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <TIM_OC1_SetConfig+0x114>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_OC1_SetConfig+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <TIM_OC1_SetConfig+0x118>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_OC1_SetConfig+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a28      	ldr	r2, [pc, #160]	; (80034ec <TIM_OC1_SetConfig+0x11c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10c      	bne.n	800346a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0308 	bic.w	r3, r3, #8
 8003456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <TIM_OC1_SetConfig+0x10c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_OC1_SetConfig+0xc2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <TIM_OC1_SetConfig+0x110>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_OC1_SetConfig+0xc2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_OC1_SetConfig+0x114>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_OC1_SetConfig+0xc2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <TIM_OC1_SetConfig+0x118>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_OC1_SetConfig+0xc2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <TIM_OC1_SetConfig+0x11c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d111      	bne.n	80034b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40013400 	.word	0x40013400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800

080034f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f023 0210 	bic.w	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0320 	bic.w	r3, r3, #32
 800353e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <TIM_OC2_SetConfig+0x100>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_OC2_SetConfig+0x6c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <TIM_OC2_SetConfig+0x104>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10d      	bne.n	8003578 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <TIM_OC2_SetConfig+0x100>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00f      	beq.n	80035a0 <TIM_OC2_SetConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <TIM_OC2_SetConfig+0x104>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_OC2_SetConfig+0xb0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <TIM_OC2_SetConfig+0x108>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_OC2_SetConfig+0xb0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <TIM_OC2_SetConfig+0x10c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC2_SetConfig+0xb0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_OC2_SetConfig+0x110>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d113      	bne.n	80035c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	621a      	str	r2, [r3, #32]
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <TIM_OC3_SetConfig+0xfc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_OC3_SetConfig+0x6a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a26      	ldr	r2, [pc, #152]	; (8003704 <TIM_OC3_SetConfig+0x100>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10d      	bne.n	800368a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <TIM_OC3_SetConfig+0xfc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00f      	beq.n	80036b2 <TIM_OC3_SetConfig+0xae>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <TIM_OC3_SetConfig+0x100>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00b      	beq.n	80036b2 <TIM_OC3_SetConfig+0xae>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <TIM_OC3_SetConfig+0x104>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <TIM_OC3_SetConfig+0xae>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <TIM_OC3_SetConfig+0x108>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_OC3_SetConfig+0xae>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <TIM_OC3_SetConfig+0x10c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800

08003714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <TIM_OC4_SetConfig+0xc0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00f      	beq.n	8003798 <TIM_OC4_SetConfig+0x84>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <TIM_OC4_SetConfig+0xc4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00b      	beq.n	8003798 <TIM_OC4_SetConfig+0x84>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a16      	ldr	r2, [pc, #88]	; (80037dc <TIM_OC4_SetConfig+0xc8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d007      	beq.n	8003798 <TIM_OC4_SetConfig+0x84>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <TIM_OC4_SetConfig+0xcc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC4_SetConfig+0x84>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <TIM_OC4_SetConfig+0xd0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d109      	bne.n	80037ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40013400 	.word	0x40013400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800

080037e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800382c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <TIM_OC5_SetConfig+0xb4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00f      	beq.n	8003862 <TIM_OC5_SetConfig+0x7a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <TIM_OC5_SetConfig+0xb8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_OC5_SetConfig+0x7a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <TIM_OC5_SetConfig+0xbc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_OC5_SetConfig+0x7a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <TIM_OC5_SetConfig+0xc0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_OC5_SetConfig+0x7a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <TIM_OC5_SetConfig+0xc4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d109      	bne.n	8003876 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003868:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	051b      	lsls	r3, r3, #20
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <TIM_OC6_SetConfig+0xb8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00f      	beq.n	800392c <TIM_OC6_SetConfig+0x7c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <TIM_OC6_SetConfig+0xbc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00b      	beq.n	800392c <TIM_OC6_SetConfig+0x7c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <TIM_OC6_SetConfig+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_OC6_SetConfig+0x7c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <TIM_OC6_SetConfig+0xc4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC6_SetConfig+0x7c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a14      	ldr	r2, [pc, #80]	; (8003978 <TIM_OC6_SetConfig+0xc8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d109      	bne.n	8003940 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40013400 	.word	0x40013400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f023 0210 	bic.w	r2, r3, #16
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f043 0307 	orr.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <WS2812_GPIO_Init>:
uint16_t TIM_Prescaler = 0;
uint16_t TIM_Period = 100;
uint8_t datasentflag;

void WS2812_GPIO_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <WS2812_GPIO_Init+0x58>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <WS2812_GPIO_Init+0x58>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <WS2812_GPIO_Init+0x58>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpioInitStruct = {0};
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]

	gpioInitStruct.Pin = GPIO_PIN_8;
 8003b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2c:	607b      	str	r3, [r7, #4]
	gpioInitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	60bb      	str	r3, [r7, #8]
	gpioInitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
	gpioInitStruct.Speed = GPIO_SPEED_LOW;
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
	gpioInitStruct.Alternate = GPIO_AF1_TIM1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpioInitStruct);
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b46:	f7fd fd2b 	bl	80015a0 <HAL_GPIO_Init>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000

08003b58 <WS2812_TIM_Init>:
void WS2812_TIM_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <WS2812_TIM_Init+0xbc>)
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <WS2812_TIM_Init+0xbc>)
 8003b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b68:	6613      	str	r3, [r2, #96]	; 0x60
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <WS2812_TIM_Init+0xbc>)
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
	// Initialize TIM1 instance and configure its parameters
	htim1.Instance = TIM1;
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <WS2812_TIM_Init+0xc4>)
 8003b7a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003b7c:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = TIM_Period-1;
 8003b82:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <WS2812_TIM_Init+0xc8>)
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003b8c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
	htim1.Init.RepetitionCounter = 0;
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim1);
 8003ba6:	481c      	ldr	r0, [pc, #112]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003ba8:	f7fe fcd0 	bl	800254c <HAL_TIM_Base_Init>

	// Configure the clock source for TIM1
	TIM_ClockConfigTypeDef timClockConfig = {0};
 8003bac:	f107 0320 	add.w	r3, r7, #32
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
	timClockConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbe:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim1, &timClockConfig);
 8003bc0:	f107 0320 	add.w	r3, r7, #32
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4814      	ldr	r0, [pc, #80]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003bc8:	f7ff f9ae 	bl	8002f28 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 8003bcc:	4812      	ldr	r0, [pc, #72]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003bce:	f7fe fd1e 	bl	800260e <HAL_TIM_PWM_Init>

	// Configure Output Compare (OC) mode for TIM1 Channel 1
	TIM_OC_InitTypeDef ocConfig = {0};
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	619a      	str	r2, [r3, #24]
	ocConfig.OCMode = TIM_OCMODE_PWM1;
 8003be4:	2360      	movs	r3, #96	; 0x60
 8003be6:	607b      	str	r3, [r7, #4]
	ocConfig.Pulse = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
	ocConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
	ocConfig.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
	ocConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
	ocConfig.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
	ocConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim1, &ocConfig, TIM_CHANNEL_1);
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	2200      	movs	r2, #0
 8003c04:	4619      	mov	r1, r3
 8003c06:	4804      	ldr	r0, [pc, #16]	; (8003c18 <WS2812_TIM_Init+0xc0>)
 8003c08:	f7ff f87a 	bl	8002d00 <HAL_TIM_PWM_ConfigChannel>
}
 8003c0c:	bf00      	nop
 8003c0e:	3730      	adds	r7, #48	; 0x30
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	2000002c 	.word	0x2000002c
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	2000000a 	.word	0x2000000a

08003c24 <WS2812_DMA_Init>:
void WS2812_DMA_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <WS2812_DMA_Init+0x84>)
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <WS2812_DMA_Init+0x84>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6493      	str	r3, [r2, #72]	; 0x48
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <WS2812_DMA_Init+0x84>)
 8003c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]


	hdmaHandle.Instance = DMA1_Channel2;
 8003c42:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c44:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <WS2812_DMA_Init+0x8c>)
 8003c46:	601a      	str	r2, [r3, #0]
	hdmaHandle.Init.Request = DMA_REQUEST_7;
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	605a      	str	r2, [r3, #4]
	hdmaHandle.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c50:	2210      	movs	r2, #16
 8003c52:	609a      	str	r2, [r3, #8]
	hdmaHandle.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
	hdmaHandle.Init.MemInc = DMA_MINC_ENABLE;
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	611a      	str	r2, [r3, #16]
	hdmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c66:	615a      	str	r2, [r3, #20]
	hdmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c6e:	619a      	str	r2, [r3, #24]
	hdmaHandle.Init.Mode = DMA_NORMAL;
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	61da      	str	r2, [r3, #28]
	hdmaHandle.Init.Priority = DMA_PRIORITY_LOW;
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	621a      	str	r2, [r3, #32]
	HAL_DMA_Init(&hdmaHandle);
 8003c7c:	480b      	ldr	r0, [pc, #44]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c7e:	f7fd fa57 	bl	8001130 <HAL_DMA_Init>
	__HAL_LINKDMA(&htim1,hdma[TIM_DMA_ID_CC1],hdmaHandle);
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <WS2812_DMA_Init+0x90>)
 8003c84:	4a09      	ldr	r2, [pc, #36]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <WS2812_DMA_Init+0x88>)
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <WS2812_DMA_Init+0x90>)
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28


	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2105      	movs	r1, #5
 8003c92:	200c      	movs	r0, #12
 8003c94:	f7fd fa15 	bl	80010c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003c98:	200c      	movs	r0, #12
 8003c9a:	f7fd fa2e 	bl	80010fa <HAL_NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	20000078 	.word	0x20000078
 8003cb0:	4002001c 	.word	0x4002001c
 8003cb4:	2000002c 	.word	0x2000002c

08003cb8 <WS2812_Init>:
 uint8_t LED_Mod[MAX_LED][4];
 uint16_t pwmData[(24*MAX_LED)+50];


void WS2812_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
	WS2812_GPIO_Init();
 8003cbc:	f7ff ff1e 	bl	8003afc <WS2812_GPIO_Init>
	WS2812_TIM_Init();
 8003cc0:	f7ff ff4a 	bl	8003b58 <WS2812_TIM_Init>
	WS2812_DMA_Init();
 8003cc4:	f7ff ffae 	bl	8003c24 <WS2812_DMA_Init>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <WS2812_send>:

void WS2812_send(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e036      	b.n	8003d4a <WS2812_send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <WS2812_send+0xcc>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	041a      	lsls	r2, r3, #16
 8003ce8:	492b      	ldr	r1, [pc, #172]	; (8003d98 <WS2812_send+0xcc>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	789b      	ldrb	r3, [r3, #2]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	4928      	ldr	r1, [pc, #160]	; (8003d98 <WS2812_send+0xcc>)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	78db      	ldrb	r3, [r3, #3]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8003d04:	2317      	movs	r3, #23
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e019      	b.n	8003d3e <WS2812_send+0x72>
		{
			if (color&(1<<i))
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <WS2812_send+0x5c>
			{
				pwmData[indx] = 63;  // 2/3 of 90
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <WS2812_send+0xd0>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	213f      	movs	r1, #63	; 0x3f
 8003d22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003d26:	e004      	b.n	8003d32 <WS2812_send+0x66>
			}

			else pwmData[indx] = 33;  // 1/3 of 90
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <WS2812_send+0xd0>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2121      	movs	r1, #33	; 0x21
 8003d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3301      	adds	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	dae2      	bge.n	8003d0a <WS2812_send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3301      	adds	r3, #1
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b0d      	cmp	r3, #13
 8003d4e:	ddc5      	ble.n	8003cdc <WS2812_send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	e00a      	b.n	8003d6c <WS2812_send+0xa0>
	{
		pwmData[indx] = 0;
 8003d56:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <WS2812_send+0xd0>)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b31      	cmp	r3, #49	; 0x31
 8003d70:	ddf1      	ble.n	8003d56 <WS2812_send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <WS2812_send+0xd0>)
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4809      	ldr	r0, [pc, #36]	; (8003da0 <WS2812_send+0xd4>)
 8003d7c:	f7fe fca8 	bl	80026d0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8003d80:	bf00      	nop
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <WS2812_send+0xd8>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0fb      	beq.n	8003d82 <WS2812_send+0xb6>
	datasentflag = 0;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <WS2812_send+0xd8>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]

}
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	200000fc 	.word	0x200000fc
 8003d9c:	20000134 	.word	0x20000134
 8003da0:	2000002c 	.word	0x2000002c
 8003da4:	200000c0 	.word	0x200000c0

08003da8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003db0:	2100      	movs	r1, #0
 8003db2:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003db4:	f7fe feac 	bl	8002b10 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2000002c 	.word	0x2000002c
 8003dcc:	200000c0 	.word	0x200000c0

08003dd0 <Set_Brightness>:
void Set_Brightness(uint8_t brightness_0to45)
{
 8003dd0:	b5b0      	push	{r4, r5, r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
#if USE_BRIGHTNESS

	float angle=0;
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
	if (brightness_0to45 > 45) brightness_0to45 = 45;
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b2d      	cmp	r3, #45	; 0x2d
 8003de4:	d901      	bls.n	8003dea <Set_Brightness+0x1a>
 8003de6:	232d      	movs	r3, #45	; 0x2d
 8003de8:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<MAX_LED; i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e060      	b.n	8003eb2 <Set_Brightness+0xe2>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8003df0:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <Set_Brightness+0x100>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003df8:	4a36      	ldr	r2, [pc, #216]	; (8003ed4 <Set_Brightness+0x104>)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8003e00:	2301      	movs	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	e04f      	b.n	8003ea6 <Set_Brightness+0xd6>
		{
			 angle = 90-brightness_0to45;  // in degrees
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e14:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7fc fb39 	bl	8000490 <__aeabi_f2d>
 8003e1e:	a32a      	add	r3, pc, #168	; (adr r3, 8003ec8 <Set_Brightness+0xf8>)
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f7fc fb8c 	bl	8000540 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <Set_Brightness+0x108>)
 8003e36:	f7fc fcad 	bl	8000794 <__aeabi_ddiv>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	f7fc fe5f 	bl	8000b04 <__aeabi_d2f>
 8003e46:	4603      	mov	r3, r0
 8003e48:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <Set_Brightness+0x100>)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	441a      	add	r2, r3
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fb07 	bl	800046c <__aeabi_i2d>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	460d      	mov	r5, r1
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7fc fb14 	bl	8000490 <__aeabi_f2d>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	ec43 2b10 	vmov	d0, r2, r3
 8003e70:	f000 f8fe 	bl	8004070 <tan>
 8003e74:	ec53 2b10 	vmov	r2, r3, d0
 8003e78:	4620      	mov	r0, r4
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	f7fc fc8a 	bl	8000794 <__aeabi_ddiv>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	f7fc fe1c 	bl	8000ac4 <__aeabi_d2uiz>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	b2d9      	uxtb	r1, r3
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <Set_Brightness+0x104>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	441a      	add	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	460a      	mov	r2, r1
 8003e9e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	ddac      	ble.n	8003e06 <Set_Brightness+0x36>
	for (int i=0; i<MAX_LED; i++)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b0d      	cmp	r3, #13
 8003eb6:	dd9b      	ble.n	8003df0 <Set_Brightness+0x20>
		}
	}

#endif

}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	53c8d4f1 	.word	0x53c8d4f1
 8003ecc:	400921fb 	.word	0x400921fb
 8003ed0:	200000c4 	.word	0x200000c4
 8003ed4:	200000fc 	.word	0x200000fc
 8003ed8:	40668000 	.word	0x40668000

08003edc <Set_LED>:
void Set_LED (uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue)
{
 8003edc:	b490      	push	{r4, r7}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	71fb      	strb	r3, [r7, #7]
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71bb      	strb	r3, [r7, #6]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	717b      	strb	r3, [r7, #5]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	713b      	strb	r3, [r7, #4]
	LED_Data[LEDnum][0] = LEDnum;
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	490d      	ldr	r1, [pc, #52]	; (8003f34 <Set_LED+0x58>)
 8003efe:	79fa      	ldrb	r2, [r7, #7]
 8003f00:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <Set_LED+0x58>)
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	797a      	ldrb	r2, [r7, #5]
 8003f0e:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <Set_LED+0x58>)
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	79ba      	ldrb	r2, [r7, #6]
 8003f1a:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <Set_LED+0x58>)
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	793a      	ldrb	r2, [r7, #4]
 8003f26:	70da      	strb	r2, [r3, #3]
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc90      	pop	{r4, r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200000c4 	.word	0x200000c4

08003f38 <GPIO_Init>:
#include "gpio.h"

void GPIO_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioInitStruct = {0};
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <GPIO_Init+0x54>)
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <GPIO_Init+0x54>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <GPIO_Init+0x54>)
 8003f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]

	gpioInitStruct.Pin = GPIO_PIN_9;
 8003f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f68:	607b      	str	r3, [r7, #4]
	gpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
	gpioInitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
	gpioInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gpioInitStruct);
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7e:	f7fd fb0f 	bl	80015a0 <HAL_GPIO_Init>
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000

08003f90 <SystemClock_Config>:
#include "rcc.h"


void SystemClock_Config(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b096      	sub	sp, #88	; 0x58
 8003f94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef rccOscInitStruct ={0};
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	2244      	movs	r2, #68	; 0x44
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f85c 	bl	800405c <memset>
	RCC_ClkInitTypeDef rccClkInitStruct ={0};
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	611a      	str	r2, [r3, #16]

	 HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) ;
 8003fb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003fb6:	f7fd fcab 	bl	8001910 <HAL_PWREx_ControlVoltageScaling>


	//OSC configuration
	rccOscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
	rccOscInitStruct.HSIState = RCC_HSI_ON;
 8003fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc2:	623b      	str	r3, [r7, #32]
	rccOscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
	rccOscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
	rccOscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40
	rccOscInitStruct.PLL.PLLM = 1;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	647b      	str	r3, [r7, #68]	; 0x44
	rccOscInitStruct.PLL.PLLN = 10;
 8003fd4:	230a      	movs	r3, #10
 8003fd6:	64bb      	str	r3, [r7, #72]	; 0x48
	rccOscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003fd8:	2307      	movs	r3, #7
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
	rccOscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	653b      	str	r3, [r7, #80]	; 0x50
	rccOscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54

	HAL_RCC_OscConfig(&rccOscInitStruct);
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fd fce7 	bl	80019bc <HAL_RCC_OscConfig>

	//CLK configuration
	rccClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003fee:	230f      	movs	r3, #15
 8003ff0:	603b      	str	r3, [r7, #0]
			RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_SYSCLK;
	rccClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	607b      	str	r3, [r7, #4]
	rccClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
	rccClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
	rccClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]

	HAL_RCC_ClockConfig(&rccClkInitStruct, FLASH_LATENCY_4);
 8004002:	463b      	mov	r3, r7
 8004004:	2104      	movs	r1, #4
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe f8b4 	bl	8002174 <HAL_RCC_ClockConfig>

}
 800400c:	bf00      	nop
 800400e:	3758      	adds	r7, #88	; 0x58
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4d0d      	ldr	r5, [pc, #52]	; (800404c <__libc_init_array+0x38>)
 8004018:	4c0d      	ldr	r4, [pc, #52]	; (8004050 <__libc_init_array+0x3c>)
 800401a:	1b64      	subs	r4, r4, r5
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	2600      	movs	r6, #0
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	4d0b      	ldr	r5, [pc, #44]	; (8004054 <__libc_init_array+0x40>)
 8004026:	4c0c      	ldr	r4, [pc, #48]	; (8004058 <__libc_init_array+0x44>)
 8004028:	f001 f8cc 	bl	80051c4 <_init>
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	2600      	movs	r6, #0
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	080053f8 	.word	0x080053f8
 8004050:	080053f8 	.word	0x080053f8
 8004054:	080053f8 	.word	0x080053f8
 8004058:	080053fc 	.word	0x080053fc

0800405c <memset>:
 800405c:	4402      	add	r2, r0
 800405e:	4603      	mov	r3, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>
 800406c:	0000      	movs	r0, r0
	...

08004070 <tan>:
 8004070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004072:	ec53 2b10 	vmov	r2, r3, d0
 8004076:	4816      	ldr	r0, [pc, #88]	; (80040d0 <tan+0x60>)
 8004078:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800407c:	4281      	cmp	r1, r0
 800407e:	dc07      	bgt.n	8004090 <tan+0x20>
 8004080:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80040c8 <tan+0x58>
 8004084:	2001      	movs	r0, #1
 8004086:	b005      	add	sp, #20
 8004088:	f85d eb04 	ldr.w	lr, [sp], #4
 800408c:	f000 bd80 	b.w	8004b90 <__kernel_tan>
 8004090:	4810      	ldr	r0, [pc, #64]	; (80040d4 <tan+0x64>)
 8004092:	4281      	cmp	r1, r0
 8004094:	dd09      	ble.n	80040aa <tan+0x3a>
 8004096:	ee10 0a10 	vmov	r0, s0
 800409a:	4619      	mov	r1, r3
 800409c:	f7fc f898 	bl	80001d0 <__aeabi_dsub>
 80040a0:	ec41 0b10 	vmov	d0, r0, r1
 80040a4:	b005      	add	sp, #20
 80040a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80040aa:	4668      	mov	r0, sp
 80040ac:	f000 f814 	bl	80040d8 <__ieee754_rem_pio2>
 80040b0:	0040      	lsls	r0, r0, #1
 80040b2:	f000 0002 	and.w	r0, r0, #2
 80040b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040ba:	ed9d 0b00 	vldr	d0, [sp]
 80040be:	f1c0 0001 	rsb	r0, r0, #1
 80040c2:	f000 fd65 	bl	8004b90 <__kernel_tan>
 80040c6:	e7ed      	b.n	80040a4 <tan+0x34>
	...
 80040d0:	3fe921fb 	.word	0x3fe921fb
 80040d4:	7fefffff 	.word	0x7fefffff

080040d8 <__ieee754_rem_pio2>:
 80040d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040dc:	ed2d 8b02 	vpush	{d8}
 80040e0:	ec55 4b10 	vmov	r4, r5, d0
 80040e4:	4bca      	ldr	r3, [pc, #808]	; (8004410 <__ieee754_rem_pio2+0x338>)
 80040e6:	b08b      	sub	sp, #44	; 0x2c
 80040e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80040ec:	4598      	cmp	r8, r3
 80040ee:	4682      	mov	sl, r0
 80040f0:	9502      	str	r5, [sp, #8]
 80040f2:	dc08      	bgt.n	8004106 <__ieee754_rem_pio2+0x2e>
 80040f4:	2200      	movs	r2, #0
 80040f6:	2300      	movs	r3, #0
 80040f8:	ed80 0b00 	vstr	d0, [r0]
 80040fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004100:	f04f 0b00 	mov.w	fp, #0
 8004104:	e028      	b.n	8004158 <__ieee754_rem_pio2+0x80>
 8004106:	4bc3      	ldr	r3, [pc, #780]	; (8004414 <__ieee754_rem_pio2+0x33c>)
 8004108:	4598      	cmp	r8, r3
 800410a:	dc78      	bgt.n	80041fe <__ieee754_rem_pio2+0x126>
 800410c:	9b02      	ldr	r3, [sp, #8]
 800410e:	4ec2      	ldr	r6, [pc, #776]	; (8004418 <__ieee754_rem_pio2+0x340>)
 8004110:	2b00      	cmp	r3, #0
 8004112:	ee10 0a10 	vmov	r0, s0
 8004116:	a3b0      	add	r3, pc, #704	; (adr r3, 80043d8 <__ieee754_rem_pio2+0x300>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	4629      	mov	r1, r5
 800411e:	dd39      	ble.n	8004194 <__ieee754_rem_pio2+0xbc>
 8004120:	f7fc f856 	bl	80001d0 <__aeabi_dsub>
 8004124:	45b0      	cmp	r8, r6
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	d01b      	beq.n	8004164 <__ieee754_rem_pio2+0x8c>
 800412c:	a3ac      	add	r3, pc, #688	; (adr r3, 80043e0 <__ieee754_rem_pio2+0x308>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f7fc f84d 	bl	80001d0 <__aeabi_dsub>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	e9ca 2300 	strd	r2, r3, [sl]
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc f845 	bl	80001d0 <__aeabi_dsub>
 8004146:	a3a6      	add	r3, pc, #664	; (adr r3, 80043e0 <__ieee754_rem_pio2+0x308>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f7fc f840 	bl	80001d0 <__aeabi_dsub>
 8004150:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004154:	f04f 0b01 	mov.w	fp, #1
 8004158:	4658      	mov	r0, fp
 800415a:	b00b      	add	sp, #44	; 0x2c
 800415c:	ecbd 8b02 	vpop	{d8}
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	a3a0      	add	r3, pc, #640	; (adr r3, 80043e8 <__ieee754_rem_pio2+0x310>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc f831 	bl	80001d0 <__aeabi_dsub>
 800416e:	a3a0      	add	r3, pc, #640	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x318>)
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	4604      	mov	r4, r0
 8004176:	460d      	mov	r5, r1
 8004178:	f7fc f82a 	bl	80001d0 <__aeabi_dsub>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	e9ca 2300 	strd	r2, r3, [sl]
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc f822 	bl	80001d0 <__aeabi_dsub>
 800418c:	a398      	add	r3, pc, #608	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x318>)
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	e7db      	b.n	800414c <__ieee754_rem_pio2+0x74>
 8004194:	f7fc f81e 	bl	80001d4 <__adddf3>
 8004198:	45b0      	cmp	r8, r6
 800419a:	4604      	mov	r4, r0
 800419c:	460d      	mov	r5, r1
 800419e:	d016      	beq.n	80041ce <__ieee754_rem_pio2+0xf6>
 80041a0:	a38f      	add	r3, pc, #572	; (adr r3, 80043e0 <__ieee754_rem_pio2+0x308>)
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f7fc f815 	bl	80001d4 <__adddf3>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	e9ca 2300 	strd	r2, r3, [sl]
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7fc f80b 	bl	80001d0 <__aeabi_dsub>
 80041ba:	a389      	add	r3, pc, #548	; (adr r3, 80043e0 <__ieee754_rem_pio2+0x308>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f808 	bl	80001d4 <__adddf3>
 80041c4:	f04f 3bff 	mov.w	fp, #4294967295
 80041c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041cc:	e7c4      	b.n	8004158 <__ieee754_rem_pio2+0x80>
 80041ce:	a386      	add	r3, pc, #536	; (adr r3, 80043e8 <__ieee754_rem_pio2+0x310>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f7fb fffe 	bl	80001d4 <__adddf3>
 80041d8:	a385      	add	r3, pc, #532	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x318>)
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	4604      	mov	r4, r0
 80041e0:	460d      	mov	r5, r1
 80041e2:	f7fb fff7 	bl	80001d4 <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	e9ca 2300 	strd	r2, r3, [sl]
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f7fb ffed 	bl	80001d0 <__aeabi_dsub>
 80041f6:	a37e      	add	r3, pc, #504	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x318>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	e7e0      	b.n	80041c0 <__ieee754_rem_pio2+0xe8>
 80041fe:	4b87      	ldr	r3, [pc, #540]	; (800441c <__ieee754_rem_pio2+0x344>)
 8004200:	4598      	cmp	r8, r3
 8004202:	f300 80d9 	bgt.w	80043b8 <__ieee754_rem_pio2+0x2e0>
 8004206:	f000 fecd 	bl	8004fa4 <fabs>
 800420a:	ec55 4b10 	vmov	r4, r5, d0
 800420e:	ee10 0a10 	vmov	r0, s0
 8004212:	a379      	add	r3, pc, #484	; (adr r3, 80043f8 <__ieee754_rem_pio2+0x320>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	4629      	mov	r1, r5
 800421a:	f7fc f991 	bl	8000540 <__aeabi_dmul>
 800421e:	4b80      	ldr	r3, [pc, #512]	; (8004420 <__ieee754_rem_pio2+0x348>)
 8004220:	2200      	movs	r2, #0
 8004222:	f7fb ffd7 	bl	80001d4 <__adddf3>
 8004226:	f7fc fc25 	bl	8000a74 <__aeabi_d2iz>
 800422a:	4683      	mov	fp, r0
 800422c:	f7fc f91e 	bl	800046c <__aeabi_i2d>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	ec43 2b18 	vmov	d8, r2, r3
 8004238:	a367      	add	r3, pc, #412	; (adr r3, 80043d8 <__ieee754_rem_pio2+0x300>)
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f7fc f97f 	bl	8000540 <__aeabi_dmul>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f7fb ffc1 	bl	80001d0 <__aeabi_dsub>
 800424e:	a364      	add	r3, pc, #400	; (adr r3, 80043e0 <__ieee754_rem_pio2+0x308>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	4606      	mov	r6, r0
 8004256:	460f      	mov	r7, r1
 8004258:	ec51 0b18 	vmov	r0, r1, d8
 800425c:	f7fc f970 	bl	8000540 <__aeabi_dmul>
 8004260:	f1bb 0f1f 	cmp.w	fp, #31
 8004264:	4604      	mov	r4, r0
 8004266:	460d      	mov	r5, r1
 8004268:	dc0d      	bgt.n	8004286 <__ieee754_rem_pio2+0x1ae>
 800426a:	4b6e      	ldr	r3, [pc, #440]	; (8004424 <__ieee754_rem_pio2+0x34c>)
 800426c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004274:	4543      	cmp	r3, r8
 8004276:	d006      	beq.n	8004286 <__ieee754_rem_pio2+0x1ae>
 8004278:	4622      	mov	r2, r4
 800427a:	462b      	mov	r3, r5
 800427c:	4630      	mov	r0, r6
 800427e:	4639      	mov	r1, r7
 8004280:	f7fb ffa6 	bl	80001d0 <__aeabi_dsub>
 8004284:	e00f      	b.n	80042a6 <__ieee754_rem_pio2+0x1ce>
 8004286:	462b      	mov	r3, r5
 8004288:	4622      	mov	r2, r4
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	f7fb ff9f 	bl	80001d0 <__aeabi_dsub>
 8004292:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800429c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80042a0:	f1b8 0f10 	cmp.w	r8, #16
 80042a4:	dc02      	bgt.n	80042ac <__ieee754_rem_pio2+0x1d4>
 80042a6:	e9ca 0100 	strd	r0, r1, [sl]
 80042aa:	e039      	b.n	8004320 <__ieee754_rem_pio2+0x248>
 80042ac:	a34e      	add	r3, pc, #312	; (adr r3, 80043e8 <__ieee754_rem_pio2+0x310>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	ec51 0b18 	vmov	r0, r1, d8
 80042b6:	f7fc f943 	bl	8000540 <__aeabi_dmul>
 80042ba:	4604      	mov	r4, r0
 80042bc:	460d      	mov	r5, r1
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4630      	mov	r0, r6
 80042c4:	4639      	mov	r1, r7
 80042c6:	f7fb ff83 	bl	80001d0 <__aeabi_dsub>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4680      	mov	r8, r0
 80042d0:	4689      	mov	r9, r1
 80042d2:	4630      	mov	r0, r6
 80042d4:	4639      	mov	r1, r7
 80042d6:	f7fb ff7b 	bl	80001d0 <__aeabi_dsub>
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	f7fb ff77 	bl	80001d0 <__aeabi_dsub>
 80042e2:	a343      	add	r3, pc, #268	; (adr r3, 80043f0 <__ieee754_rem_pio2+0x318>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	4604      	mov	r4, r0
 80042ea:	460d      	mov	r5, r1
 80042ec:	ec51 0b18 	vmov	r0, r1, d8
 80042f0:	f7fc f926 	bl	8000540 <__aeabi_dmul>
 80042f4:	4622      	mov	r2, r4
 80042f6:	462b      	mov	r3, r5
 80042f8:	f7fb ff6a 	bl	80001d0 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
 8004304:	4640      	mov	r0, r8
 8004306:	4649      	mov	r1, r9
 8004308:	f7fb ff62 	bl	80001d0 <__aeabi_dsub>
 800430c:	9a03      	ldr	r2, [sp, #12]
 800430e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b31      	cmp	r3, #49	; 0x31
 8004316:	dc24      	bgt.n	8004362 <__ieee754_rem_pio2+0x28a>
 8004318:	e9ca 0100 	strd	r0, r1, [sl]
 800431c:	4646      	mov	r6, r8
 800431e:	464f      	mov	r7, r9
 8004320:	e9da 8900 	ldrd	r8, r9, [sl]
 8004324:	4630      	mov	r0, r6
 8004326:	4642      	mov	r2, r8
 8004328:	464b      	mov	r3, r9
 800432a:	4639      	mov	r1, r7
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	462b      	mov	r3, r5
 8004332:	4622      	mov	r2, r4
 8004334:	f7fb ff4c 	bl	80001d0 <__aeabi_dsub>
 8004338:	9b02      	ldr	r3, [sp, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004340:	f6bf af0a 	bge.w	8004158 <__ieee754_rem_pio2+0x80>
 8004344:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004348:	f8ca 3004 	str.w	r3, [sl, #4]
 800434c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004350:	f8ca 8000 	str.w	r8, [sl]
 8004354:	f8ca 0008 	str.w	r0, [sl, #8]
 8004358:	f8ca 300c 	str.w	r3, [sl, #12]
 800435c:	f1cb 0b00 	rsb	fp, fp, #0
 8004360:	e6fa      	b.n	8004158 <__ieee754_rem_pio2+0x80>
 8004362:	a327      	add	r3, pc, #156	; (adr r3, 8004400 <__ieee754_rem_pio2+0x328>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	ec51 0b18 	vmov	r0, r1, d8
 800436c:	f7fc f8e8 	bl	8000540 <__aeabi_dmul>
 8004370:	4604      	mov	r4, r0
 8004372:	460d      	mov	r5, r1
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4640      	mov	r0, r8
 800437a:	4649      	mov	r1, r9
 800437c:	f7fb ff28 	bl	80001d0 <__aeabi_dsub>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4606      	mov	r6, r0
 8004386:	460f      	mov	r7, r1
 8004388:	4640      	mov	r0, r8
 800438a:	4649      	mov	r1, r9
 800438c:	f7fb ff20 	bl	80001d0 <__aeabi_dsub>
 8004390:	4622      	mov	r2, r4
 8004392:	462b      	mov	r3, r5
 8004394:	f7fb ff1c 	bl	80001d0 <__aeabi_dsub>
 8004398:	a31b      	add	r3, pc, #108	; (adr r3, 8004408 <__ieee754_rem_pio2+0x330>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	4604      	mov	r4, r0
 80043a0:	460d      	mov	r5, r1
 80043a2:	ec51 0b18 	vmov	r0, r1, d8
 80043a6:	f7fc f8cb 	bl	8000540 <__aeabi_dmul>
 80043aa:	4622      	mov	r2, r4
 80043ac:	462b      	mov	r3, r5
 80043ae:	f7fb ff0f 	bl	80001d0 <__aeabi_dsub>
 80043b2:	4604      	mov	r4, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	e75f      	b.n	8004278 <__ieee754_rem_pio2+0x1a0>
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <__ieee754_rem_pio2+0x350>)
 80043ba:	4598      	cmp	r8, r3
 80043bc:	dd36      	ble.n	800442c <__ieee754_rem_pio2+0x354>
 80043be:	ee10 2a10 	vmov	r2, s0
 80043c2:	462b      	mov	r3, r5
 80043c4:	4620      	mov	r0, r4
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7fb ff02 	bl	80001d0 <__aeabi_dsub>
 80043cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80043d0:	e9ca 0100 	strd	r0, r1, [sl]
 80043d4:	e694      	b.n	8004100 <__ieee754_rem_pio2+0x28>
 80043d6:	bf00      	nop
 80043d8:	54400000 	.word	0x54400000
 80043dc:	3ff921fb 	.word	0x3ff921fb
 80043e0:	1a626331 	.word	0x1a626331
 80043e4:	3dd0b461 	.word	0x3dd0b461
 80043e8:	1a600000 	.word	0x1a600000
 80043ec:	3dd0b461 	.word	0x3dd0b461
 80043f0:	2e037073 	.word	0x2e037073
 80043f4:	3ba3198a 	.word	0x3ba3198a
 80043f8:	6dc9c883 	.word	0x6dc9c883
 80043fc:	3fe45f30 	.word	0x3fe45f30
 8004400:	2e000000 	.word	0x2e000000
 8004404:	3ba3198a 	.word	0x3ba3198a
 8004408:	252049c1 	.word	0x252049c1
 800440c:	397b839a 	.word	0x397b839a
 8004410:	3fe921fb 	.word	0x3fe921fb
 8004414:	4002d97b 	.word	0x4002d97b
 8004418:	3ff921fb 	.word	0x3ff921fb
 800441c:	413921fb 	.word	0x413921fb
 8004420:	3fe00000 	.word	0x3fe00000
 8004424:	08005220 	.word	0x08005220
 8004428:	7fefffff 	.word	0x7fefffff
 800442c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004430:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004434:	ee10 0a10 	vmov	r0, s0
 8004438:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800443c:	ee10 6a10 	vmov	r6, s0
 8004440:	460f      	mov	r7, r1
 8004442:	f7fc fb17 	bl	8000a74 <__aeabi_d2iz>
 8004446:	f7fc f811 	bl	800046c <__aeabi_i2d>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4630      	mov	r0, r6
 8004450:	4639      	mov	r1, r7
 8004452:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004456:	f7fb febb 	bl	80001d0 <__aeabi_dsub>
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <__ieee754_rem_pio2+0x410>)
 800445c:	2200      	movs	r2, #0
 800445e:	f7fc f86f 	bl	8000540 <__aeabi_dmul>
 8004462:	460f      	mov	r7, r1
 8004464:	4606      	mov	r6, r0
 8004466:	f7fc fb05 	bl	8000a74 <__aeabi_d2iz>
 800446a:	f7fb ffff 	bl	800046c <__aeabi_i2d>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4630      	mov	r0, r6
 8004474:	4639      	mov	r1, r7
 8004476:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800447a:	f7fb fea9 	bl	80001d0 <__aeabi_dsub>
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <__ieee754_rem_pio2+0x410>)
 8004480:	2200      	movs	r2, #0
 8004482:	f7fc f85d 	bl	8000540 <__aeabi_dmul>
 8004486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800448a:	ad04      	add	r5, sp, #16
 800448c:	f04f 0803 	mov.w	r8, #3
 8004490:	46a9      	mov	r9, r5
 8004492:	2600      	movs	r6, #0
 8004494:	2700      	movs	r7, #0
 8004496:	4632      	mov	r2, r6
 8004498:	463b      	mov	r3, r7
 800449a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800449e:	46c3      	mov	fp, r8
 80044a0:	3d08      	subs	r5, #8
 80044a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80044a6:	f7fc fab3 	bl	8000a10 <__aeabi_dcmpeq>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d1f3      	bne.n	8004496 <__ieee754_rem_pio2+0x3be>
 80044ae:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <__ieee754_rem_pio2+0x414>)
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2302      	movs	r3, #2
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	4622      	mov	r2, r4
 80044b8:	465b      	mov	r3, fp
 80044ba:	4651      	mov	r1, sl
 80044bc:	4648      	mov	r0, r9
 80044be:	f000 f817 	bl	80044f0 <__kernel_rem_pio2>
 80044c2:	9b02      	ldr	r3, [sp, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	4683      	mov	fp, r0
 80044c8:	f6bf ae46 	bge.w	8004158 <__ieee754_rem_pio2+0x80>
 80044cc:	e9da 2100 	ldrd	r2, r1, [sl]
 80044d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044d4:	e9ca 2300 	strd	r2, r3, [sl]
 80044d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80044dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80044e4:	e73a      	b.n	800435c <__ieee754_rem_pio2+0x284>
 80044e6:	bf00      	nop
 80044e8:	41700000 	.word	0x41700000
 80044ec:	080052a0 	.word	0x080052a0

080044f0 <__kernel_rem_pio2>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	ed2d 8b02 	vpush	{d8}
 80044f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80044fc:	f112 0f14 	cmn.w	r2, #20
 8004500:	9308      	str	r3, [sp, #32]
 8004502:	9101      	str	r1, [sp, #4]
 8004504:	4bc4      	ldr	r3, [pc, #784]	; (8004818 <__kernel_rem_pio2+0x328>)
 8004506:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004508:	900b      	str	r0, [sp, #44]	; 0x2c
 800450a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800450e:	9302      	str	r3, [sp, #8]
 8004510:	9b08      	ldr	r3, [sp, #32]
 8004512:	f103 33ff 	add.w	r3, r3, #4294967295
 8004516:	bfa8      	it	ge
 8004518:	1ed4      	subge	r4, r2, #3
 800451a:	9306      	str	r3, [sp, #24]
 800451c:	bfb2      	itee	lt
 800451e:	2400      	movlt	r4, #0
 8004520:	2318      	movge	r3, #24
 8004522:	fb94 f4f3 	sdivge	r4, r4, r3
 8004526:	f06f 0317 	mvn.w	r3, #23
 800452a:	fb04 3303 	mla	r3, r4, r3, r3
 800452e:	eb03 0a02 	add.w	sl, r3, r2
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	9a06      	ldr	r2, [sp, #24]
 8004536:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004808 <__kernel_rem_pio2+0x318>
 800453a:	eb03 0802 	add.w	r8, r3, r2
 800453e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004540:	1aa7      	subs	r7, r4, r2
 8004542:	ae22      	add	r6, sp, #136	; 0x88
 8004544:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004548:	2500      	movs	r5, #0
 800454a:	4545      	cmp	r5, r8
 800454c:	dd13      	ble.n	8004576 <__kernel_rem_pio2+0x86>
 800454e:	9b08      	ldr	r3, [sp, #32]
 8004550:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004808 <__kernel_rem_pio2+0x318>
 8004554:	aa22      	add	r2, sp, #136	; 0x88
 8004556:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800455a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800455e:	f04f 0800 	mov.w	r8, #0
 8004562:	9b02      	ldr	r3, [sp, #8]
 8004564:	4598      	cmp	r8, r3
 8004566:	dc2f      	bgt.n	80045c8 <__kernel_rem_pio2+0xd8>
 8004568:	ed8d 8b04 	vstr	d8, [sp, #16]
 800456c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004570:	462f      	mov	r7, r5
 8004572:	2600      	movs	r6, #0
 8004574:	e01b      	b.n	80045ae <__kernel_rem_pio2+0xbe>
 8004576:	42ef      	cmn	r7, r5
 8004578:	d407      	bmi.n	800458a <__kernel_rem_pio2+0x9a>
 800457a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800457e:	f7fb ff75 	bl	800046c <__aeabi_i2d>
 8004582:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004586:	3501      	adds	r5, #1
 8004588:	e7df      	b.n	800454a <__kernel_rem_pio2+0x5a>
 800458a:	ec51 0b18 	vmov	r0, r1, d8
 800458e:	e7f8      	b.n	8004582 <__kernel_rem_pio2+0x92>
 8004590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004594:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004598:	f7fb ffd2 	bl	8000540 <__aeabi_dmul>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045a4:	f7fb fe16 	bl	80001d4 <__adddf3>
 80045a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045ac:	3601      	adds	r6, #1
 80045ae:	9b06      	ldr	r3, [sp, #24]
 80045b0:	429e      	cmp	r6, r3
 80045b2:	f1a7 0708 	sub.w	r7, r7, #8
 80045b6:	ddeb      	ble.n	8004590 <__kernel_rem_pio2+0xa0>
 80045b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80045bc:	f108 0801 	add.w	r8, r8, #1
 80045c0:	ecab 7b02 	vstmia	fp!, {d7}
 80045c4:	3508      	adds	r5, #8
 80045c6:	e7cc      	b.n	8004562 <__kernel_rem_pio2+0x72>
 80045c8:	9b02      	ldr	r3, [sp, #8]
 80045ca:	aa0e      	add	r2, sp, #56	; 0x38
 80045cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80045d0:	930d      	str	r3, [sp, #52]	; 0x34
 80045d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80045d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80045d8:	9c02      	ldr	r4, [sp, #8]
 80045da:	930c      	str	r3, [sp, #48]	; 0x30
 80045dc:	00e3      	lsls	r3, r4, #3
 80045de:	930a      	str	r3, [sp, #40]	; 0x28
 80045e0:	ab9a      	add	r3, sp, #616	; 0x268
 80045e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80045ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80045ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80045f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80045f4:	46c3      	mov	fp, r8
 80045f6:	46a1      	mov	r9, r4
 80045f8:	f1b9 0f00 	cmp.w	r9, #0
 80045fc:	f1a5 0508 	sub.w	r5, r5, #8
 8004600:	dc77      	bgt.n	80046f2 <__kernel_rem_pio2+0x202>
 8004602:	ec47 6b10 	vmov	d0, r6, r7
 8004606:	4650      	mov	r0, sl
 8004608:	f000 fd56 	bl	80050b8 <scalbn>
 800460c:	ec57 6b10 	vmov	r6, r7, d0
 8004610:	2200      	movs	r2, #0
 8004612:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004616:	ee10 0a10 	vmov	r0, s0
 800461a:	4639      	mov	r1, r7
 800461c:	f7fb ff90 	bl	8000540 <__aeabi_dmul>
 8004620:	ec41 0b10 	vmov	d0, r0, r1
 8004624:	f000 fcc8 	bl	8004fb8 <floor>
 8004628:	4b7c      	ldr	r3, [pc, #496]	; (800481c <__kernel_rem_pio2+0x32c>)
 800462a:	ec51 0b10 	vmov	r0, r1, d0
 800462e:	2200      	movs	r2, #0
 8004630:	f7fb ff86 	bl	8000540 <__aeabi_dmul>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4630      	mov	r0, r6
 800463a:	4639      	mov	r1, r7
 800463c:	f7fb fdc8 	bl	80001d0 <__aeabi_dsub>
 8004640:	460f      	mov	r7, r1
 8004642:	4606      	mov	r6, r0
 8004644:	f7fc fa16 	bl	8000a74 <__aeabi_d2iz>
 8004648:	9004      	str	r0, [sp, #16]
 800464a:	f7fb ff0f 	bl	800046c <__aeabi_i2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4630      	mov	r0, r6
 8004654:	4639      	mov	r1, r7
 8004656:	f7fb fdbb 	bl	80001d0 <__aeabi_dsub>
 800465a:	f1ba 0f00 	cmp.w	sl, #0
 800465e:	4606      	mov	r6, r0
 8004660:	460f      	mov	r7, r1
 8004662:	dd6d      	ble.n	8004740 <__kernel_rem_pio2+0x250>
 8004664:	1e62      	subs	r2, r4, #1
 8004666:	ab0e      	add	r3, sp, #56	; 0x38
 8004668:	9d04      	ldr	r5, [sp, #16]
 800466a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800466e:	f1ca 0118 	rsb	r1, sl, #24
 8004672:	fa40 f301 	asr.w	r3, r0, r1
 8004676:	441d      	add	r5, r3
 8004678:	408b      	lsls	r3, r1
 800467a:	1ac0      	subs	r0, r0, r3
 800467c:	ab0e      	add	r3, sp, #56	; 0x38
 800467e:	9504      	str	r5, [sp, #16]
 8004680:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004684:	f1ca 0317 	rsb	r3, sl, #23
 8004688:	fa40 fb03 	asr.w	fp, r0, r3
 800468c:	f1bb 0f00 	cmp.w	fp, #0
 8004690:	dd65      	ble.n	800475e <__kernel_rem_pio2+0x26e>
 8004692:	9b04      	ldr	r3, [sp, #16]
 8004694:	2200      	movs	r2, #0
 8004696:	3301      	adds	r3, #1
 8004698:	9304      	str	r3, [sp, #16]
 800469a:	4615      	mov	r5, r2
 800469c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80046a0:	4294      	cmp	r4, r2
 80046a2:	f300 809c 	bgt.w	80047de <__kernel_rem_pio2+0x2ee>
 80046a6:	f1ba 0f00 	cmp.w	sl, #0
 80046aa:	dd07      	ble.n	80046bc <__kernel_rem_pio2+0x1cc>
 80046ac:	f1ba 0f01 	cmp.w	sl, #1
 80046b0:	f000 80c0 	beq.w	8004834 <__kernel_rem_pio2+0x344>
 80046b4:	f1ba 0f02 	cmp.w	sl, #2
 80046b8:	f000 80c6 	beq.w	8004848 <__kernel_rem_pio2+0x358>
 80046bc:	f1bb 0f02 	cmp.w	fp, #2
 80046c0:	d14d      	bne.n	800475e <__kernel_rem_pio2+0x26e>
 80046c2:	4632      	mov	r2, r6
 80046c4:	463b      	mov	r3, r7
 80046c6:	4956      	ldr	r1, [pc, #344]	; (8004820 <__kernel_rem_pio2+0x330>)
 80046c8:	2000      	movs	r0, #0
 80046ca:	f7fb fd81 	bl	80001d0 <__aeabi_dsub>
 80046ce:	4606      	mov	r6, r0
 80046d0:	460f      	mov	r7, r1
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	d043      	beq.n	800475e <__kernel_rem_pio2+0x26e>
 80046d6:	4650      	mov	r0, sl
 80046d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004810 <__kernel_rem_pio2+0x320>
 80046dc:	f000 fcec 	bl	80050b8 <scalbn>
 80046e0:	4630      	mov	r0, r6
 80046e2:	4639      	mov	r1, r7
 80046e4:	ec53 2b10 	vmov	r2, r3, d0
 80046e8:	f7fb fd72 	bl	80001d0 <__aeabi_dsub>
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	e035      	b.n	800475e <__kernel_rem_pio2+0x26e>
 80046f2:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <__kernel_rem_pio2+0x334>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	4630      	mov	r0, r6
 80046f8:	4639      	mov	r1, r7
 80046fa:	f7fb ff21 	bl	8000540 <__aeabi_dmul>
 80046fe:	f7fc f9b9 	bl	8000a74 <__aeabi_d2iz>
 8004702:	f7fb feb3 	bl	800046c <__aeabi_i2d>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	ec43 2b18 	vmov	d8, r2, r3
 800470e:	4b46      	ldr	r3, [pc, #280]	; (8004828 <__kernel_rem_pio2+0x338>)
 8004710:	2200      	movs	r2, #0
 8004712:	f7fb ff15 	bl	8000540 <__aeabi_dmul>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4630      	mov	r0, r6
 800471c:	4639      	mov	r1, r7
 800471e:	f7fb fd57 	bl	80001d0 <__aeabi_dsub>
 8004722:	f7fc f9a7 	bl	8000a74 <__aeabi_d2iz>
 8004726:	e9d5 2300 	ldrd	r2, r3, [r5]
 800472a:	f84b 0b04 	str.w	r0, [fp], #4
 800472e:	ec51 0b18 	vmov	r0, r1, d8
 8004732:	f7fb fd4f 	bl	80001d4 <__adddf3>
 8004736:	f109 39ff 	add.w	r9, r9, #4294967295
 800473a:	4606      	mov	r6, r0
 800473c:	460f      	mov	r7, r1
 800473e:	e75b      	b.n	80045f8 <__kernel_rem_pio2+0x108>
 8004740:	d106      	bne.n	8004750 <__kernel_rem_pio2+0x260>
 8004742:	1e63      	subs	r3, r4, #1
 8004744:	aa0e      	add	r2, sp, #56	; 0x38
 8004746:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800474a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800474e:	e79d      	b.n	800468c <__kernel_rem_pio2+0x19c>
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <__kernel_rem_pio2+0x33c>)
 8004752:	2200      	movs	r2, #0
 8004754:	f7fc f97a 	bl	8000a4c <__aeabi_dcmpge>
 8004758:	2800      	cmp	r0, #0
 800475a:	d13d      	bne.n	80047d8 <__kernel_rem_pio2+0x2e8>
 800475c:	4683      	mov	fp, r0
 800475e:	2200      	movs	r2, #0
 8004760:	2300      	movs	r3, #0
 8004762:	4630      	mov	r0, r6
 8004764:	4639      	mov	r1, r7
 8004766:	f7fc f953 	bl	8000a10 <__aeabi_dcmpeq>
 800476a:	2800      	cmp	r0, #0
 800476c:	f000 80c0 	beq.w	80048f0 <__kernel_rem_pio2+0x400>
 8004770:	1e65      	subs	r5, r4, #1
 8004772:	462b      	mov	r3, r5
 8004774:	2200      	movs	r2, #0
 8004776:	9902      	ldr	r1, [sp, #8]
 8004778:	428b      	cmp	r3, r1
 800477a:	da6c      	bge.n	8004856 <__kernel_rem_pio2+0x366>
 800477c:	2a00      	cmp	r2, #0
 800477e:	f000 8089 	beq.w	8004894 <__kernel_rem_pio2+0x3a4>
 8004782:	ab0e      	add	r3, sp, #56	; 0x38
 8004784:	f1aa 0a18 	sub.w	sl, sl, #24
 8004788:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80ad 	beq.w	80048ec <__kernel_rem_pio2+0x3fc>
 8004792:	4650      	mov	r0, sl
 8004794:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004810 <__kernel_rem_pio2+0x320>
 8004798:	f000 fc8e 	bl	80050b8 <scalbn>
 800479c:	ab9a      	add	r3, sp, #616	; 0x268
 800479e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80047a2:	ec57 6b10 	vmov	r6, r7, d0
 80047a6:	00ec      	lsls	r4, r5, #3
 80047a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80047ac:	46aa      	mov	sl, r5
 80047ae:	f1ba 0f00 	cmp.w	sl, #0
 80047b2:	f280 80d6 	bge.w	8004962 <__kernel_rem_pio2+0x472>
 80047b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004808 <__kernel_rem_pio2+0x318>
 80047ba:	462e      	mov	r6, r5
 80047bc:	2e00      	cmp	r6, #0
 80047be:	f2c0 8104 	blt.w	80049ca <__kernel_rem_pio2+0x4da>
 80047c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80047c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80047c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004830 <__kernel_rem_pio2+0x340>
 80047cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80047d0:	f04f 0800 	mov.w	r8, #0
 80047d4:	1baf      	subs	r7, r5, r6
 80047d6:	e0ea      	b.n	80049ae <__kernel_rem_pio2+0x4be>
 80047d8:	f04f 0b02 	mov.w	fp, #2
 80047dc:	e759      	b.n	8004692 <__kernel_rem_pio2+0x1a2>
 80047de:	f8d8 3000 	ldr.w	r3, [r8]
 80047e2:	b955      	cbnz	r5, 80047fa <__kernel_rem_pio2+0x30a>
 80047e4:	b123      	cbz	r3, 80047f0 <__kernel_rem_pio2+0x300>
 80047e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80047ea:	f8c8 3000 	str.w	r3, [r8]
 80047ee:	2301      	movs	r3, #1
 80047f0:	3201      	adds	r2, #1
 80047f2:	f108 0804 	add.w	r8, r8, #4
 80047f6:	461d      	mov	r5, r3
 80047f8:	e752      	b.n	80046a0 <__kernel_rem_pio2+0x1b0>
 80047fa:	1acb      	subs	r3, r1, r3
 80047fc:	f8c8 3000 	str.w	r3, [r8]
 8004800:	462b      	mov	r3, r5
 8004802:	e7f5      	b.n	80047f0 <__kernel_rem_pio2+0x300>
 8004804:	f3af 8000 	nop.w
	...
 8004814:	3ff00000 	.word	0x3ff00000
 8004818:	080053e8 	.word	0x080053e8
 800481c:	40200000 	.word	0x40200000
 8004820:	3ff00000 	.word	0x3ff00000
 8004824:	3e700000 	.word	0x3e700000
 8004828:	41700000 	.word	0x41700000
 800482c:	3fe00000 	.word	0x3fe00000
 8004830:	080053a8 	.word	0x080053a8
 8004834:	1e62      	subs	r2, r4, #1
 8004836:	ab0e      	add	r3, sp, #56	; 0x38
 8004838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004840:	a90e      	add	r1, sp, #56	; 0x38
 8004842:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004846:	e739      	b.n	80046bc <__kernel_rem_pio2+0x1cc>
 8004848:	1e62      	subs	r2, r4, #1
 800484a:	ab0e      	add	r3, sp, #56	; 0x38
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004854:	e7f4      	b.n	8004840 <__kernel_rem_pio2+0x350>
 8004856:	a90e      	add	r1, sp, #56	; 0x38
 8004858:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800485c:	3b01      	subs	r3, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	e789      	b.n	8004776 <__kernel_rem_pio2+0x286>
 8004862:	3301      	adds	r3, #1
 8004864:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004868:	2900      	cmp	r1, #0
 800486a:	d0fa      	beq.n	8004862 <__kernel_rem_pio2+0x372>
 800486c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800486e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004872:	446a      	add	r2, sp
 8004874:	3a98      	subs	r2, #152	; 0x98
 8004876:	920a      	str	r2, [sp, #40]	; 0x28
 8004878:	9a08      	ldr	r2, [sp, #32]
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	18a5      	adds	r5, r4, r2
 800487e:	aa22      	add	r2, sp, #136	; 0x88
 8004880:	f104 0801 	add.w	r8, r4, #1
 8004884:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	9b04      	ldr	r3, [sp, #16]
 800488c:	4543      	cmp	r3, r8
 800488e:	da04      	bge.n	800489a <__kernel_rem_pio2+0x3aa>
 8004890:	461c      	mov	r4, r3
 8004892:	e6a3      	b.n	80045dc <__kernel_rem_pio2+0xec>
 8004894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004896:	2301      	movs	r3, #1
 8004898:	e7e4      	b.n	8004864 <__kernel_rem_pio2+0x374>
 800489a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800489c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80048a0:	f7fb fde4 	bl	800046c <__aeabi_i2d>
 80048a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80048a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048aa:	46ab      	mov	fp, r5
 80048ac:	461c      	mov	r4, r3
 80048ae:	f04f 0900 	mov.w	r9, #0
 80048b2:	2600      	movs	r6, #0
 80048b4:	2700      	movs	r7, #0
 80048b6:	9b06      	ldr	r3, [sp, #24]
 80048b8:	4599      	cmp	r9, r3
 80048ba:	dd06      	ble.n	80048ca <__kernel_rem_pio2+0x3da>
 80048bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048be:	e8e3 6702 	strd	r6, r7, [r3], #8
 80048c2:	f108 0801 	add.w	r8, r8, #1
 80048c6:	930a      	str	r3, [sp, #40]	; 0x28
 80048c8:	e7df      	b.n	800488a <__kernel_rem_pio2+0x39a>
 80048ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80048ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80048d2:	f7fb fe35 	bl	8000540 <__aeabi_dmul>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4630      	mov	r0, r6
 80048dc:	4639      	mov	r1, r7
 80048de:	f7fb fc79 	bl	80001d4 <__adddf3>
 80048e2:	f109 0901 	add.w	r9, r9, #1
 80048e6:	4606      	mov	r6, r0
 80048e8:	460f      	mov	r7, r1
 80048ea:	e7e4      	b.n	80048b6 <__kernel_rem_pio2+0x3c6>
 80048ec:	3d01      	subs	r5, #1
 80048ee:	e748      	b.n	8004782 <__kernel_rem_pio2+0x292>
 80048f0:	ec47 6b10 	vmov	d0, r6, r7
 80048f4:	f1ca 0000 	rsb	r0, sl, #0
 80048f8:	f000 fbde 	bl	80050b8 <scalbn>
 80048fc:	ec57 6b10 	vmov	r6, r7, d0
 8004900:	4ba0      	ldr	r3, [pc, #640]	; (8004b84 <__kernel_rem_pio2+0x694>)
 8004902:	ee10 0a10 	vmov	r0, s0
 8004906:	2200      	movs	r2, #0
 8004908:	4639      	mov	r1, r7
 800490a:	f7fc f89f 	bl	8000a4c <__aeabi_dcmpge>
 800490e:	b1f8      	cbz	r0, 8004950 <__kernel_rem_pio2+0x460>
 8004910:	4b9d      	ldr	r3, [pc, #628]	; (8004b88 <__kernel_rem_pio2+0x698>)
 8004912:	2200      	movs	r2, #0
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fb fe12 	bl	8000540 <__aeabi_dmul>
 800491c:	f7fc f8aa 	bl	8000a74 <__aeabi_d2iz>
 8004920:	4680      	mov	r8, r0
 8004922:	f7fb fda3 	bl	800046c <__aeabi_i2d>
 8004926:	4b97      	ldr	r3, [pc, #604]	; (8004b84 <__kernel_rem_pio2+0x694>)
 8004928:	2200      	movs	r2, #0
 800492a:	f7fb fe09 	bl	8000540 <__aeabi_dmul>
 800492e:	460b      	mov	r3, r1
 8004930:	4602      	mov	r2, r0
 8004932:	4639      	mov	r1, r7
 8004934:	4630      	mov	r0, r6
 8004936:	f7fb fc4b 	bl	80001d0 <__aeabi_dsub>
 800493a:	f7fc f89b 	bl	8000a74 <__aeabi_d2iz>
 800493e:	1c65      	adds	r5, r4, #1
 8004940:	ab0e      	add	r3, sp, #56	; 0x38
 8004942:	f10a 0a18 	add.w	sl, sl, #24
 8004946:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800494a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800494e:	e720      	b.n	8004792 <__kernel_rem_pio2+0x2a2>
 8004950:	4630      	mov	r0, r6
 8004952:	4639      	mov	r1, r7
 8004954:	f7fc f88e 	bl	8000a74 <__aeabi_d2iz>
 8004958:	ab0e      	add	r3, sp, #56	; 0x38
 800495a:	4625      	mov	r5, r4
 800495c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004960:	e717      	b.n	8004792 <__kernel_rem_pio2+0x2a2>
 8004962:	ab0e      	add	r3, sp, #56	; 0x38
 8004964:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004968:	f7fb fd80 	bl	800046c <__aeabi_i2d>
 800496c:	4632      	mov	r2, r6
 800496e:	463b      	mov	r3, r7
 8004970:	f7fb fde6 	bl	8000540 <__aeabi_dmul>
 8004974:	4b84      	ldr	r3, [pc, #528]	; (8004b88 <__kernel_rem_pio2+0x698>)
 8004976:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800497a:	2200      	movs	r2, #0
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fb fdde 	bl	8000540 <__aeabi_dmul>
 8004984:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004988:	4606      	mov	r6, r0
 800498a:	460f      	mov	r7, r1
 800498c:	e70f      	b.n	80047ae <__kernel_rem_pio2+0x2be>
 800498e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004992:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004996:	f7fb fdd3 	bl	8000540 <__aeabi_dmul>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049a2:	f7fb fc17 	bl	80001d4 <__adddf3>
 80049a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049aa:	f108 0801 	add.w	r8, r8, #1
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	4598      	cmp	r8, r3
 80049b2:	dc01      	bgt.n	80049b8 <__kernel_rem_pio2+0x4c8>
 80049b4:	45b8      	cmp	r8, r7
 80049b6:	ddea      	ble.n	800498e <__kernel_rem_pio2+0x49e>
 80049b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80049bc:	ab4a      	add	r3, sp, #296	; 0x128
 80049be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80049c2:	ed87 7b00 	vstr	d7, [r7]
 80049c6:	3e01      	subs	r6, #1
 80049c8:	e6f8      	b.n	80047bc <__kernel_rem_pio2+0x2cc>
 80049ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	dc0b      	bgt.n	80049e8 <__kernel_rem_pio2+0x4f8>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	dc35      	bgt.n	8004a40 <__kernel_rem_pio2+0x550>
 80049d4:	d059      	beq.n	8004a8a <__kernel_rem_pio2+0x59a>
 80049d6:	9b04      	ldr	r3, [sp, #16]
 80049d8:	f003 0007 	and.w	r0, r3, #7
 80049dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80049e0:	ecbd 8b02 	vpop	{d8}
 80049e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d1f3      	bne.n	80049d6 <__kernel_rem_pio2+0x4e6>
 80049ee:	ab4a      	add	r3, sp, #296	; 0x128
 80049f0:	4423      	add	r3, r4
 80049f2:	9306      	str	r3, [sp, #24]
 80049f4:	461c      	mov	r4, r3
 80049f6:	469a      	mov	sl, r3
 80049f8:	9502      	str	r5, [sp, #8]
 80049fa:	9b02      	ldr	r3, [sp, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f1aa 0a08 	sub.w	sl, sl, #8
 8004a02:	dc6b      	bgt.n	8004adc <__kernel_rem_pio2+0x5ec>
 8004a04:	46aa      	mov	sl, r5
 8004a06:	f1ba 0f01 	cmp.w	sl, #1
 8004a0a:	f1a4 0408 	sub.w	r4, r4, #8
 8004a0e:	f300 8085 	bgt.w	8004b1c <__kernel_rem_pio2+0x62c>
 8004a12:	9c06      	ldr	r4, [sp, #24]
 8004a14:	2000      	movs	r0, #0
 8004a16:	3408      	adds	r4, #8
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2d01      	cmp	r5, #1
 8004a1c:	f300 809d 	bgt.w	8004b5a <__kernel_rem_pio2+0x66a>
 8004a20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004a24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004a28:	f1bb 0f00 	cmp.w	fp, #0
 8004a2c:	f040 809b 	bne.w	8004b66 <__kernel_rem_pio2+0x676>
 8004a30:	9b01      	ldr	r3, [sp, #4]
 8004a32:	e9c3 5600 	strd	r5, r6, [r3]
 8004a36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004a3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004a3e:	e7ca      	b.n	80049d6 <__kernel_rem_pio2+0x4e6>
 8004a40:	3408      	adds	r4, #8
 8004a42:	ab4a      	add	r3, sp, #296	; 0x128
 8004a44:	441c      	add	r4, r3
 8004a46:	462e      	mov	r6, r5
 8004a48:	2000      	movs	r0, #0
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2e00      	cmp	r6, #0
 8004a4e:	da36      	bge.n	8004abe <__kernel_rem_pio2+0x5ce>
 8004a50:	f1bb 0f00 	cmp.w	fp, #0
 8004a54:	d039      	beq.n	8004aca <__kernel_rem_pio2+0x5da>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a5c:	9c01      	ldr	r4, [sp, #4]
 8004a5e:	e9c4 2300 	strd	r2, r3, [r4]
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004a6a:	f7fb fbb1 	bl	80001d0 <__aeabi_dsub>
 8004a6e:	ae4c      	add	r6, sp, #304	; 0x130
 8004a70:	2401      	movs	r4, #1
 8004a72:	42a5      	cmp	r5, r4
 8004a74:	da2c      	bge.n	8004ad0 <__kernel_rem_pio2+0x5e0>
 8004a76:	f1bb 0f00 	cmp.w	fp, #0
 8004a7a:	d002      	beq.n	8004a82 <__kernel_rem_pio2+0x592>
 8004a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a80:	4619      	mov	r1, r3
 8004a82:	9b01      	ldr	r3, [sp, #4]
 8004a84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004a88:	e7a5      	b.n	80049d6 <__kernel_rem_pio2+0x4e6>
 8004a8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004a8e:	eb0d 0403 	add.w	r4, sp, r3
 8004a92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004a96:	2000      	movs	r0, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	da09      	bge.n	8004ab2 <__kernel_rem_pio2+0x5c2>
 8004a9e:	f1bb 0f00 	cmp.w	fp, #0
 8004aa2:	d002      	beq.n	8004aaa <__kernel_rem_pio2+0x5ba>
 8004aa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	9b01      	ldr	r3, [sp, #4]
 8004aac:	e9c3 0100 	strd	r0, r1, [r3]
 8004ab0:	e791      	b.n	80049d6 <__kernel_rem_pio2+0x4e6>
 8004ab2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ab6:	f7fb fb8d 	bl	80001d4 <__adddf3>
 8004aba:	3d01      	subs	r5, #1
 8004abc:	e7ed      	b.n	8004a9a <__kernel_rem_pio2+0x5aa>
 8004abe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ac2:	f7fb fb87 	bl	80001d4 <__adddf3>
 8004ac6:	3e01      	subs	r6, #1
 8004ac8:	e7c0      	b.n	8004a4c <__kernel_rem_pio2+0x55c>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	e7c5      	b.n	8004a5c <__kernel_rem_pio2+0x56c>
 8004ad0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004ad4:	f7fb fb7e 	bl	80001d4 <__adddf3>
 8004ad8:	3401      	adds	r4, #1
 8004ada:	e7ca      	b.n	8004a72 <__kernel_rem_pio2+0x582>
 8004adc:	e9da 8900 	ldrd	r8, r9, [sl]
 8004ae0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004ae4:	9b02      	ldr	r3, [sp, #8]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	9302      	str	r3, [sp, #8]
 8004aea:	4632      	mov	r2, r6
 8004aec:	463b      	mov	r3, r7
 8004aee:	4640      	mov	r0, r8
 8004af0:	4649      	mov	r1, r9
 8004af2:	f7fb fb6f 	bl	80001d4 <__adddf3>
 8004af6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4640      	mov	r0, r8
 8004b00:	4649      	mov	r1, r9
 8004b02:	f7fb fb65 	bl	80001d0 <__aeabi_dsub>
 8004b06:	4632      	mov	r2, r6
 8004b08:	463b      	mov	r3, r7
 8004b0a:	f7fb fb63 	bl	80001d4 <__adddf3>
 8004b0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004b12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b16:	ed8a 7b00 	vstr	d7, [sl]
 8004b1a:	e76e      	b.n	80049fa <__kernel_rem_pio2+0x50a>
 8004b1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004b20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004b24:	4640      	mov	r0, r8
 8004b26:	4632      	mov	r2, r6
 8004b28:	463b      	mov	r3, r7
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	f7fb fb52 	bl	80001d4 <__adddf3>
 8004b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4640      	mov	r0, r8
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	f7fb fb48 	bl	80001d0 <__aeabi_dsub>
 8004b40:	4632      	mov	r2, r6
 8004b42:	463b      	mov	r3, r7
 8004b44:	f7fb fb46 	bl	80001d4 <__adddf3>
 8004b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b50:	ed84 7b00 	vstr	d7, [r4]
 8004b54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b58:	e755      	b.n	8004a06 <__kernel_rem_pio2+0x516>
 8004b5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b5e:	f7fb fb39 	bl	80001d4 <__adddf3>
 8004b62:	3d01      	subs	r5, #1
 8004b64:	e759      	b.n	8004a1a <__kernel_rem_pio2+0x52a>
 8004b66:	9b01      	ldr	r3, [sp, #4]
 8004b68:	9a01      	ldr	r2, [sp, #4]
 8004b6a:	601d      	str	r5, [r3, #0]
 8004b6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004b70:	605c      	str	r4, [r3, #4]
 8004b72:	609f      	str	r7, [r3, #8]
 8004b74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004b78:	60d3      	str	r3, [r2, #12]
 8004b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b7e:	6110      	str	r0, [r2, #16]
 8004b80:	6153      	str	r3, [r2, #20]
 8004b82:	e728      	b.n	80049d6 <__kernel_rem_pio2+0x4e6>
 8004b84:	41700000 	.word	0x41700000
 8004b88:	3e700000 	.word	0x3e700000
 8004b8c:	00000000 	.word	0x00000000

08004b90 <__kernel_tan>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	ed2d 8b06 	vpush	{d8-d10}
 8004b98:	ec5b ab10 	vmov	sl, fp, d0
 8004b9c:	4be0      	ldr	r3, [pc, #896]	; (8004f20 <__kernel_tan+0x390>)
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8004ba4:	429f      	cmp	r7, r3
 8004ba6:	ec59 8b11 	vmov	r8, r9, d1
 8004baa:	4606      	mov	r6, r0
 8004bac:	f8cd b000 	str.w	fp, [sp]
 8004bb0:	dc61      	bgt.n	8004c76 <__kernel_tan+0xe6>
 8004bb2:	ee10 0a10 	vmov	r0, s0
 8004bb6:	4659      	mov	r1, fp
 8004bb8:	f7fb ff5c 	bl	8000a74 <__aeabi_d2iz>
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f040 8083 	bne.w	8004cca <__kernel_tan+0x13a>
 8004bc4:	1c73      	adds	r3, r6, #1
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	433b      	orrs	r3, r7
 8004bcc:	d112      	bne.n	8004bf4 <__kernel_tan+0x64>
 8004bce:	ec4b ab10 	vmov	d0, sl, fp
 8004bd2:	f000 f9e7 	bl	8004fa4 <fabs>
 8004bd6:	49d3      	ldr	r1, [pc, #844]	; (8004f24 <__kernel_tan+0x394>)
 8004bd8:	ec53 2b10 	vmov	r2, r3, d0
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7fb fdd9 	bl	8000794 <__aeabi_ddiv>
 8004be2:	4682      	mov	sl, r0
 8004be4:	468b      	mov	fp, r1
 8004be6:	ec4b ab10 	vmov	d0, sl, fp
 8004bea:	b003      	add	sp, #12
 8004bec:	ecbd 8b06 	vpop	{d8-d10}
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf4:	2e01      	cmp	r6, #1
 8004bf6:	d0f6      	beq.n	8004be6 <__kernel_tan+0x56>
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	4659      	mov	r1, fp
 8004c00:	f7fb fae8 	bl	80001d4 <__adddf3>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	460f      	mov	r7, r1
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	49c6      	ldr	r1, [pc, #792]	; (8004f28 <__kernel_tan+0x398>)
 8004c0e:	f7fb fdc1 	bl	8000794 <__aeabi_ddiv>
 8004c12:	e9cd 0100 	strd	r0, r1, [sp]
 8004c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c1a:	462e      	mov	r6, r5
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	462c      	mov	r4, r5
 8004c20:	4630      	mov	r0, r6
 8004c22:	461d      	mov	r5, r3
 8004c24:	4639      	mov	r1, r7
 8004c26:	465b      	mov	r3, fp
 8004c28:	f7fb fad2 	bl	80001d0 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4640      	mov	r0, r8
 8004c32:	4649      	mov	r1, r9
 8004c34:	f7fb facc 	bl	80001d0 <__aeabi_dsub>
 8004c38:	4632      	mov	r2, r6
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	f7fb fc80 	bl	8000540 <__aeabi_dmul>
 8004c40:	4632      	mov	r2, r6
 8004c42:	4680      	mov	r8, r0
 8004c44:	4689      	mov	r9, r1
 8004c46:	462b      	mov	r3, r5
 8004c48:	4630      	mov	r0, r6
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	f7fb fc78 	bl	8000540 <__aeabi_dmul>
 8004c50:	4bb4      	ldr	r3, [pc, #720]	; (8004f24 <__kernel_tan+0x394>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	f7fb fabe 	bl	80001d4 <__adddf3>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4649      	mov	r1, r9
 8004c60:	f7fb fab8 	bl	80001d4 <__adddf3>
 8004c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c68:	f7fb fc6a 	bl	8000540 <__aeabi_dmul>
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	462b      	mov	r3, r5
 8004c70:	f7fb fab0 	bl	80001d4 <__adddf3>
 8004c74:	e7b5      	b.n	8004be2 <__kernel_tan+0x52>
 8004c76:	4bad      	ldr	r3, [pc, #692]	; (8004f2c <__kernel_tan+0x39c>)
 8004c78:	429f      	cmp	r7, r3
 8004c7a:	dd26      	ble.n	8004cca <__kernel_tan+0x13a>
 8004c7c:	9b00      	ldr	r3, [sp, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da09      	bge.n	8004c96 <__kernel_tan+0x106>
 8004c82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c86:	469b      	mov	fp, r3
 8004c88:	ee10 aa10 	vmov	sl, s0
 8004c8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004c90:	ee11 8a10 	vmov	r8, s2
 8004c94:	4699      	mov	r9, r3
 8004c96:	4652      	mov	r2, sl
 8004c98:	465b      	mov	r3, fp
 8004c9a:	a183      	add	r1, pc, #524	; (adr r1, 8004ea8 <__kernel_tan+0x318>)
 8004c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ca0:	f7fb fa96 	bl	80001d0 <__aeabi_dsub>
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	a180      	add	r1, pc, #512	; (adr r1, 8004eb0 <__kernel_tan+0x320>)
 8004cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cb2:	f7fb fa8d 	bl	80001d0 <__aeabi_dsub>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	f7fb fa8b 	bl	80001d4 <__adddf3>
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	4682      	mov	sl, r0
 8004cc4:	468b      	mov	fp, r1
 8004cc6:	f04f 0900 	mov.w	r9, #0
 8004cca:	4652      	mov	r2, sl
 8004ccc:	465b      	mov	r3, fp
 8004cce:	4650      	mov	r0, sl
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	f7fb fc35 	bl	8000540 <__aeabi_dmul>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	ec43 2b18 	vmov	d8, r2, r3
 8004cde:	f7fb fc2f 	bl	8000540 <__aeabi_dmul>
 8004ce2:	ec53 2b18 	vmov	r2, r3, d8
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	460d      	mov	r5, r1
 8004cea:	4650      	mov	r0, sl
 8004cec:	4659      	mov	r1, fp
 8004cee:	f7fb fc27 	bl	8000540 <__aeabi_dmul>
 8004cf2:	a371      	add	r3, pc, #452	; (adr r3, 8004eb8 <__kernel_tan+0x328>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	ec41 0b19 	vmov	d9, r0, r1
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fc1e 	bl	8000540 <__aeabi_dmul>
 8004d04:	a36e      	add	r3, pc, #440	; (adr r3, 8004ec0 <__kernel_tan+0x330>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fa63 	bl	80001d4 <__adddf3>
 8004d0e:	4622      	mov	r2, r4
 8004d10:	462b      	mov	r3, r5
 8004d12:	f7fb fc15 	bl	8000540 <__aeabi_dmul>
 8004d16:	a36c      	add	r3, pc, #432	; (adr r3, 8004ec8 <__kernel_tan+0x338>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fa5a 	bl	80001d4 <__adddf3>
 8004d20:	4622      	mov	r2, r4
 8004d22:	462b      	mov	r3, r5
 8004d24:	f7fb fc0c 	bl	8000540 <__aeabi_dmul>
 8004d28:	a369      	add	r3, pc, #420	; (adr r3, 8004ed0 <__kernel_tan+0x340>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb fa51 	bl	80001d4 <__adddf3>
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	f7fb fc03 	bl	8000540 <__aeabi_dmul>
 8004d3a:	a367      	add	r3, pc, #412	; (adr r3, 8004ed8 <__kernel_tan+0x348>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fa48 	bl	80001d4 <__adddf3>
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	f7fb fbfa 	bl	8000540 <__aeabi_dmul>
 8004d4c:	a364      	add	r3, pc, #400	; (adr r3, 8004ee0 <__kernel_tan+0x350>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa3f 	bl	80001d4 <__adddf3>
 8004d56:	ec53 2b18 	vmov	r2, r3, d8
 8004d5a:	f7fb fbf1 	bl	8000540 <__aeabi_dmul>
 8004d5e:	a362      	add	r3, pc, #392	; (adr r3, 8004ee8 <__kernel_tan+0x358>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	ec41 0b1a 	vmov	d10, r0, r1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	f7fb fbe8 	bl	8000540 <__aeabi_dmul>
 8004d70:	a35f      	add	r3, pc, #380	; (adr r3, 8004ef0 <__kernel_tan+0x360>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fa2d 	bl	80001d4 <__adddf3>
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f7fb fbdf 	bl	8000540 <__aeabi_dmul>
 8004d82:	a35d      	add	r3, pc, #372	; (adr r3, 8004ef8 <__kernel_tan+0x368>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fa24 	bl	80001d4 <__adddf3>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	462b      	mov	r3, r5
 8004d90:	f7fb fbd6 	bl	8000540 <__aeabi_dmul>
 8004d94:	a35a      	add	r3, pc, #360	; (adr r3, 8004f00 <__kernel_tan+0x370>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fa1b 	bl	80001d4 <__adddf3>
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	f7fb fbcd 	bl	8000540 <__aeabi_dmul>
 8004da6:	a358      	add	r3, pc, #352	; (adr r3, 8004f08 <__kernel_tan+0x378>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fa12 	bl	80001d4 <__adddf3>
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	f7fb fbc4 	bl	8000540 <__aeabi_dmul>
 8004db8:	a355      	add	r3, pc, #340	; (adr r3, 8004f10 <__kernel_tan+0x380>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fa09 	bl	80001d4 <__adddf3>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	ec51 0b1a 	vmov	r0, r1, d10
 8004dca:	f7fb fa03 	bl	80001d4 <__adddf3>
 8004dce:	ec53 2b19 	vmov	r2, r3, d9
 8004dd2:	f7fb fbb5 	bl	8000540 <__aeabi_dmul>
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	464b      	mov	r3, r9
 8004dda:	f7fb f9fb 	bl	80001d4 <__adddf3>
 8004dde:	ec53 2b18 	vmov	r2, r3, d8
 8004de2:	f7fb fbad 	bl	8000540 <__aeabi_dmul>
 8004de6:	4642      	mov	r2, r8
 8004de8:	464b      	mov	r3, r9
 8004dea:	f7fb f9f3 	bl	80001d4 <__adddf3>
 8004dee:	a34a      	add	r3, pc, #296	; (adr r3, 8004f18 <__kernel_tan+0x388>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	4604      	mov	r4, r0
 8004df6:	460d      	mov	r5, r1
 8004df8:	ec51 0b19 	vmov	r0, r1, d9
 8004dfc:	f7fb fba0 	bl	8000540 <__aeabi_dmul>
 8004e00:	4622      	mov	r2, r4
 8004e02:	462b      	mov	r3, r5
 8004e04:	f7fb f9e6 	bl	80001d4 <__adddf3>
 8004e08:	460b      	mov	r3, r1
 8004e0a:	ec41 0b18 	vmov	d8, r0, r1
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4659      	mov	r1, fp
 8004e12:	4650      	mov	r0, sl
 8004e14:	f7fb f9de 	bl	80001d4 <__adddf3>
 8004e18:	4b44      	ldr	r3, [pc, #272]	; (8004f2c <__kernel_tan+0x39c>)
 8004e1a:	429f      	cmp	r7, r3
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	460d      	mov	r5, r1
 8004e20:	f340 8086 	ble.w	8004f30 <__kernel_tan+0x3a0>
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7fb fb21 	bl	800046c <__aeabi_i2d>
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4689      	mov	r9, r1
 8004e30:	462b      	mov	r3, r5
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fb83 	bl	8000540 <__aeabi_dmul>
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	4606      	mov	r6, r0
 8004e3e:	460f      	mov	r7, r1
 8004e40:	464b      	mov	r3, r9
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	f7fb f9c5 	bl	80001d4 <__adddf3>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4630      	mov	r0, r6
 8004e50:	4639      	mov	r1, r7
 8004e52:	f7fb fc9f 	bl	8000794 <__aeabi_ddiv>
 8004e56:	ec53 2b18 	vmov	r2, r3, d8
 8004e5a:	f7fb f9b9 	bl	80001d0 <__aeabi_dsub>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4650      	mov	r0, sl
 8004e64:	4659      	mov	r1, fp
 8004e66:	f7fb f9b3 	bl	80001d0 <__aeabi_dsub>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	f7fb f9b1 	bl	80001d4 <__adddf3>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f7fb f9a9 	bl	80001d0 <__aeabi_dsub>
 8004e7e:	9b00      	ldr	r3, [sp, #0]
 8004e80:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8004e84:	f00a 0a02 	and.w	sl, sl, #2
 8004e88:	4604      	mov	r4, r0
 8004e8a:	f1ca 0001 	rsb	r0, sl, #1
 8004e8e:	460d      	mov	r5, r1
 8004e90:	f7fb faec 	bl	800046c <__aeabi_i2d>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb fb50 	bl	8000540 <__aeabi_dmul>
 8004ea0:	e69f      	b.n	8004be2 <__kernel_tan+0x52>
 8004ea2:	bf00      	nop
 8004ea4:	f3af 8000 	nop.w
 8004ea8:	54442d18 	.word	0x54442d18
 8004eac:	3fe921fb 	.word	0x3fe921fb
 8004eb0:	33145c07 	.word	0x33145c07
 8004eb4:	3c81a626 	.word	0x3c81a626
 8004eb8:	74bf7ad4 	.word	0x74bf7ad4
 8004ebc:	3efb2a70 	.word	0x3efb2a70
 8004ec0:	32f0a7e9 	.word	0x32f0a7e9
 8004ec4:	3f12b80f 	.word	0x3f12b80f
 8004ec8:	1a8d1068 	.word	0x1a8d1068
 8004ecc:	3f3026f7 	.word	0x3f3026f7
 8004ed0:	fee08315 	.word	0xfee08315
 8004ed4:	3f57dbc8 	.word	0x3f57dbc8
 8004ed8:	e96e8493 	.word	0xe96e8493
 8004edc:	3f8226e3 	.word	0x3f8226e3
 8004ee0:	1bb341fe 	.word	0x1bb341fe
 8004ee4:	3faba1ba 	.word	0x3faba1ba
 8004ee8:	db605373 	.word	0xdb605373
 8004eec:	bef375cb 	.word	0xbef375cb
 8004ef0:	a03792a6 	.word	0xa03792a6
 8004ef4:	3f147e88 	.word	0x3f147e88
 8004ef8:	f2f26501 	.word	0xf2f26501
 8004efc:	3f4344d8 	.word	0x3f4344d8
 8004f00:	c9560328 	.word	0xc9560328
 8004f04:	3f6d6d22 	.word	0x3f6d6d22
 8004f08:	8406d637 	.word	0x8406d637
 8004f0c:	3f9664f4 	.word	0x3f9664f4
 8004f10:	1110fe7a 	.word	0x1110fe7a
 8004f14:	3fc11111 	.word	0x3fc11111
 8004f18:	55555563 	.word	0x55555563
 8004f1c:	3fd55555 	.word	0x3fd55555
 8004f20:	3e2fffff 	.word	0x3e2fffff
 8004f24:	3ff00000 	.word	0x3ff00000
 8004f28:	bff00000 	.word	0xbff00000
 8004f2c:	3fe59427 	.word	0x3fe59427
 8004f30:	2e01      	cmp	r6, #1
 8004f32:	d02f      	beq.n	8004f94 <__kernel_tan+0x404>
 8004f34:	460f      	mov	r7, r1
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4689      	mov	r9, r1
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	4917      	ldr	r1, [pc, #92]	; (8004f9c <__kernel_tan+0x40c>)
 8004f40:	f7fb fc28 	bl	8000794 <__aeabi_ddiv>
 8004f44:	2600      	movs	r6, #0
 8004f46:	e9cd 0100 	strd	r0, r1, [sp]
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	465b      	mov	r3, fp
 8004f4e:	4630      	mov	r0, r6
 8004f50:	4639      	mov	r1, r7
 8004f52:	f7fb f93d 	bl	80001d0 <__aeabi_dsub>
 8004f56:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	ec51 0b18 	vmov	r0, r1, d8
 8004f62:	f7fb f935 	bl	80001d0 <__aeabi_dsub>
 8004f66:	4632      	mov	r2, r6
 8004f68:	462b      	mov	r3, r5
 8004f6a:	f7fb fae9 	bl	8000540 <__aeabi_dmul>
 8004f6e:	46b0      	mov	r8, r6
 8004f70:	460f      	mov	r7, r1
 8004f72:	4642      	mov	r2, r8
 8004f74:	462b      	mov	r3, r5
 8004f76:	4634      	mov	r4, r6
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	f7fb fadf 	bl	8000540 <__aeabi_dmul>
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <__kernel_tan+0x410>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	f7fb f925 	bl	80001d4 <__adddf3>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	e665      	b.n	8004c60 <__kernel_tan+0xd0>
 8004f94:	4682      	mov	sl, r0
 8004f96:	468b      	mov	fp, r1
 8004f98:	e625      	b.n	8004be6 <__kernel_tan+0x56>
 8004f9a:	bf00      	nop
 8004f9c:	bff00000 	.word	0xbff00000
 8004fa0:	3ff00000 	.word	0x3ff00000

08004fa4 <fabs>:
 8004fa4:	ec51 0b10 	vmov	r0, r1, d0
 8004fa8:	ee10 2a10 	vmov	r2, s0
 8004fac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fb0:	ec43 2b10 	vmov	d0, r2, r3
 8004fb4:	4770      	bx	lr
	...

08004fb8 <floor>:
 8004fb8:	ec51 0b10 	vmov	r0, r1, d0
 8004fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004fc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004fc8:	2e13      	cmp	r6, #19
 8004fca:	ee10 5a10 	vmov	r5, s0
 8004fce:	ee10 8a10 	vmov	r8, s0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	dc32      	bgt.n	800503c <floor+0x84>
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	da14      	bge.n	8005004 <floor+0x4c>
 8004fda:	a333      	add	r3, pc, #204	; (adr r3, 80050a8 <floor+0xf0>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f7fb f8f8 	bl	80001d4 <__adddf3>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f7fb fd3a 	bl	8000a60 <__aeabi_dcmpgt>
 8004fec:	b138      	cbz	r0, 8004ffe <floor+0x46>
 8004fee:	2c00      	cmp	r4, #0
 8004ff0:	da57      	bge.n	80050a2 <floor+0xea>
 8004ff2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004ff6:	431d      	orrs	r5, r3
 8004ff8:	d001      	beq.n	8004ffe <floor+0x46>
 8004ffa:	4c2d      	ldr	r4, [pc, #180]	; (80050b0 <floor+0xf8>)
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	4621      	mov	r1, r4
 8005000:	4628      	mov	r0, r5
 8005002:	e025      	b.n	8005050 <floor+0x98>
 8005004:	4f2b      	ldr	r7, [pc, #172]	; (80050b4 <floor+0xfc>)
 8005006:	4137      	asrs	r7, r6
 8005008:	ea01 0307 	and.w	r3, r1, r7
 800500c:	4303      	orrs	r3, r0
 800500e:	d01f      	beq.n	8005050 <floor+0x98>
 8005010:	a325      	add	r3, pc, #148	; (adr r3, 80050a8 <floor+0xf0>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb f8dd 	bl	80001d4 <__adddf3>
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	f7fb fd1f 	bl	8000a60 <__aeabi_dcmpgt>
 8005022:	2800      	cmp	r0, #0
 8005024:	d0eb      	beq.n	8004ffe <floor+0x46>
 8005026:	2c00      	cmp	r4, #0
 8005028:	bfbe      	ittt	lt
 800502a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800502e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005032:	19a4      	addlt	r4, r4, r6
 8005034:	ea24 0407 	bic.w	r4, r4, r7
 8005038:	2500      	movs	r5, #0
 800503a:	e7e0      	b.n	8004ffe <floor+0x46>
 800503c:	2e33      	cmp	r6, #51	; 0x33
 800503e:	dd0b      	ble.n	8005058 <floor+0xa0>
 8005040:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005044:	d104      	bne.n	8005050 <floor+0x98>
 8005046:	ee10 2a10 	vmov	r2, s0
 800504a:	460b      	mov	r3, r1
 800504c:	f7fb f8c2 	bl	80001d4 <__adddf3>
 8005050:	ec41 0b10 	vmov	d0, r0, r1
 8005054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005058:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	fa23 f707 	lsr.w	r7, r3, r7
 8005064:	4207      	tst	r7, r0
 8005066:	d0f3      	beq.n	8005050 <floor+0x98>
 8005068:	a30f      	add	r3, pc, #60	; (adr r3, 80050a8 <floor+0xf0>)
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f7fb f8b1 	bl	80001d4 <__adddf3>
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	f7fb fcf3 	bl	8000a60 <__aeabi_dcmpgt>
 800507a:	2800      	cmp	r0, #0
 800507c:	d0bf      	beq.n	8004ffe <floor+0x46>
 800507e:	2c00      	cmp	r4, #0
 8005080:	da02      	bge.n	8005088 <floor+0xd0>
 8005082:	2e14      	cmp	r6, #20
 8005084:	d103      	bne.n	800508e <floor+0xd6>
 8005086:	3401      	adds	r4, #1
 8005088:	ea25 0507 	bic.w	r5, r5, r7
 800508c:	e7b7      	b.n	8004ffe <floor+0x46>
 800508e:	2301      	movs	r3, #1
 8005090:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005094:	fa03 f606 	lsl.w	r6, r3, r6
 8005098:	4435      	add	r5, r6
 800509a:	4545      	cmp	r5, r8
 800509c:	bf38      	it	cc
 800509e:	18e4      	addcc	r4, r4, r3
 80050a0:	e7f2      	b.n	8005088 <floor+0xd0>
 80050a2:	2500      	movs	r5, #0
 80050a4:	462c      	mov	r4, r5
 80050a6:	e7aa      	b.n	8004ffe <floor+0x46>
 80050a8:	8800759c 	.word	0x8800759c
 80050ac:	7e37e43c 	.word	0x7e37e43c
 80050b0:	bff00000 	.word	0xbff00000
 80050b4:	000fffff 	.word	0x000fffff

080050b8 <scalbn>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	ec55 4b10 	vmov	r4, r5, d0
 80050be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80050c2:	4606      	mov	r6, r0
 80050c4:	462b      	mov	r3, r5
 80050c6:	b99a      	cbnz	r2, 80050f0 <scalbn+0x38>
 80050c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80050cc:	4323      	orrs	r3, r4
 80050ce:	d036      	beq.n	800513e <scalbn+0x86>
 80050d0:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <scalbn+0x100>)
 80050d2:	4629      	mov	r1, r5
 80050d4:	ee10 0a10 	vmov	r0, s0
 80050d8:	2200      	movs	r2, #0
 80050da:	f7fb fa31 	bl	8000540 <__aeabi_dmul>
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <scalbn+0x104>)
 80050e0:	429e      	cmp	r6, r3
 80050e2:	4604      	mov	r4, r0
 80050e4:	460d      	mov	r5, r1
 80050e6:	da10      	bge.n	800510a <scalbn+0x52>
 80050e8:	a32b      	add	r3, pc, #172	; (adr r3, 8005198 <scalbn+0xe0>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	e03a      	b.n	8005166 <scalbn+0xae>
 80050f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80050f4:	428a      	cmp	r2, r1
 80050f6:	d10c      	bne.n	8005112 <scalbn+0x5a>
 80050f8:	ee10 2a10 	vmov	r2, s0
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	f7fb f868 	bl	80001d4 <__adddf3>
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	e019      	b.n	800513e <scalbn+0x86>
 800510a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800510e:	460b      	mov	r3, r1
 8005110:	3a36      	subs	r2, #54	; 0x36
 8005112:	4432      	add	r2, r6
 8005114:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005118:	428a      	cmp	r2, r1
 800511a:	dd08      	ble.n	800512e <scalbn+0x76>
 800511c:	2d00      	cmp	r5, #0
 800511e:	a120      	add	r1, pc, #128	; (adr r1, 80051a0 <scalbn+0xe8>)
 8005120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005124:	da1c      	bge.n	8005160 <scalbn+0xa8>
 8005126:	a120      	add	r1, pc, #128	; (adr r1, 80051a8 <scalbn+0xf0>)
 8005128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800512c:	e018      	b.n	8005160 <scalbn+0xa8>
 800512e:	2a00      	cmp	r2, #0
 8005130:	dd08      	ble.n	8005144 <scalbn+0x8c>
 8005132:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005136:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800513a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800513e:	ec45 4b10 	vmov	d0, r4, r5
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005148:	da19      	bge.n	800517e <scalbn+0xc6>
 800514a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800514e:	429e      	cmp	r6, r3
 8005150:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005154:	dd0a      	ble.n	800516c <scalbn+0xb4>
 8005156:	a112      	add	r1, pc, #72	; (adr r1, 80051a0 <scalbn+0xe8>)
 8005158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e2      	bne.n	8005126 <scalbn+0x6e>
 8005160:	a30f      	add	r3, pc, #60	; (adr r3, 80051a0 <scalbn+0xe8>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb f9eb 	bl	8000540 <__aeabi_dmul>
 800516a:	e7cb      	b.n	8005104 <scalbn+0x4c>
 800516c:	a10a      	add	r1, pc, #40	; (adr r1, 8005198 <scalbn+0xe0>)
 800516e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0b8      	beq.n	80050e8 <scalbn+0x30>
 8005176:	a10e      	add	r1, pc, #56	; (adr r1, 80051b0 <scalbn+0xf8>)
 8005178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517c:	e7b4      	b.n	80050e8 <scalbn+0x30>
 800517e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005182:	3236      	adds	r2, #54	; 0x36
 8005184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005188:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800518c:	4620      	mov	r0, r4
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <scalbn+0x108>)
 8005190:	2200      	movs	r2, #0
 8005192:	e7e8      	b.n	8005166 <scalbn+0xae>
 8005194:	f3af 8000 	nop.w
 8005198:	c2f8f359 	.word	0xc2f8f359
 800519c:	01a56e1f 	.word	0x01a56e1f
 80051a0:	8800759c 	.word	0x8800759c
 80051a4:	7e37e43c 	.word	0x7e37e43c
 80051a8:	8800759c 	.word	0x8800759c
 80051ac:	fe37e43c 	.word	0xfe37e43c
 80051b0:	c2f8f359 	.word	0xc2f8f359
 80051b4:	81a56e1f 	.word	0x81a56e1f
 80051b8:	43500000 	.word	0x43500000
 80051bc:	ffff3cb0 	.word	0xffff3cb0
 80051c0:	3c900000 	.word	0x3c900000

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
